/* Copyright (c) 2011-2011 Sven van der Meer (sven@vandermeer.de)
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and  binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     + Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     + Redistributions  in binary  form must  reproduce the  above copyright
 *       notice, this list  of conditions and  the following disclaimer  in the
 *       documentation and/or other materials provided with the distribution.
 *     + Neither the name of the the author nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS"
 * AND ANY EXPRESS  OR IMPLIED WARRANTIES,  INCLUDING, BUT NOT  LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY  AND FITNESS FOR A  PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN  NO EVENT SHALL  THE COPYRIGHT HOLDER  OR CONTRIBUTORS BE
 * LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,   OR
 * CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT  LIMITED  TO,  PROCUREMENT  OF
 * SUBSTITUTE GOODS  OR SERVICES;  LOSS OF  USE, DATA,  OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER  CAUSED AND  ON ANY  THEORY OF  LIABILITY, WHETHER  IN
 * CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED  OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Template file for the target sql in Org.SKB.Lang.Dal
 *
 * @package    org.skb.lang.dal
 * @author     Sven van der Meer <sven@vandermeer.de>
 * @copyright  2011-2011 Sven van der Meer
 * @license    http://www.opensource.org/licenses/bsd-license.php  BSD License
 * @version    v1.0.0 build 110901 (01-Sep-11) for StringTemplate v3.2.0
 */

group sql;

mlcomment_start(dummy) ::= "/*"
mlcomment_end(dummy) ::= "*/"
slcomment(comment) ::= "-- <comment>"


dalElementTypeMap ::= [
  "string":"TEXT",
  "integer":"INT",
  default:"TEXT"
]


dalSpecification(definition) ::= ""

dalDefinition(package) ::= ""

dalPackage(ident, empty, repos, tables, actions, data) ::= <<
<empty>
<repos;separator="\n\n">
<tables;separator="\n\n">
<actions;separator="\n\n">
<data;separator="\n\n">
>>


dalRepository(ident, tables) ::= <<
<tables;separator="\n\n">
>>

dalTable(ident, fields) ::= <<
<!#ifndef "TABLE_<ident>" !>
#ifdef "DROP_CREATE_TABLE"
DROP TABLE IF EXISTS <ident>;
CREATE TABLE [<ident>] (<fields; separator=", ">);
#endif
#ifdef "EMPTY_TABLE"
DELETE FROM <ident>;
#endif
<! #endif !>
<! #define "TABLE_<ident>" !>
>>

dalField(ident, type, constraints, size, precision, others) ::= <<
[<ident>] <dalElementTypeMap.(type)><if(size)> (<size><endif><if(precision)>,<precision><endif><if(size)>)<endif><if(constraints)> <constraints; separator=" "><endif><if(constraints)> <others; separator=" "><endif>
>>

dalFieldConstraintReasonMap ::= [
  "primkey":"PRIMARY KEY",
  "notnull":"NOT NULL",
  "unique":"UNIQUE",
  default:key
]
dalFieldConstraintActionMap ::= [
  "abort":"ABORT",
  "rollback":"ROLLBACK",
  default:key
]

dalFieldConstraint(reason, action) ::= <<
<if(reason)><if(action)><dalFieldConstraintReasonMap.(reason)> ON CONFLICT <dalFieldConstraintActionMap.(action)><endif><endif>
>>

dalSequence(ids) ::= <<
>>

dalPackageRepository(repo, tables) ::= <<
<tables; separator="\n">
>>

dalPackageRepositoryTable(table, kv) ::= <<
<kv:{ kv | INSERT OR REPLACE INTO <table> <kv>};separator="\n">
>>


dalPackageRepositoryRow(kv) ::= <<
(<kv.keys:{k| "<k>"};separator=", ">) VALUES(<kv.keys:{k|"<kv.(k)>"};separator=", ">);
>>

dalActions(insert, remove, empty) ::= <<
<empty; separator="\n">
<remove; separator="\n">
<insert; separator="\n">
>>

dalActionsInsert(table, kvl) ::= <<
INSERT OR REPLACE INTO <table> (<kvl.keys:{k| "<k>"};separator=", ">) VALUES(<kvl.keys:{k|"<kvl.(k)>"};separator=", ">);
>>

dalActionsRemove(table, kv) ::= <<
<if(kv)>DELETE FROM <table> WHERE <kv.keys:{k| "<k>" = "<kv.(k)>"};separator=" AND ">;<else>DROP TABLE <table>;<endif>
>>

dalActionsEmpty(table) ::= <<
DELETE FROM <table>;
>>

dalData(rows) ::= <<
<rows;separator="\n">
>>

dalDataRow(table, kvl) ::= <<
INSERT OR REPLACE INTO <table> (<kvl.keys:{k| "<k>"};separator=", ">) VALUES(<kvl.keys:{k|"<kvl.(k)>"};separator=", ">);
>>

const_value(val) ::= "<val>"