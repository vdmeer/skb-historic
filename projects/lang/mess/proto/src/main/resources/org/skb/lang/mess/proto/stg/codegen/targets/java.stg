/* Copyright (c) 2011-2011 Sven van der Meer
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and  binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     + Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     + Redistributions  in binary  form must  reproduce the  above copyright
 *       notice, this list  of conditions and  the following disclaimer  in the
 *       documentation and/or other materials provided with the distribution.
 *     + Neither the name of the the author nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS"
 * AND ANY EXPRESS  OR IMPLIED WARRANTIES,  INCLUDING, BUT NOT  LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY  AND FITNESS FOR A  PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN  NO EVENT SHALL  THE COPYRIGHT HOLDER  OR CONTRIBUTORS BE
 * LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,   OR
 * CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT  LIMITED  TO,  PROCUREMENT  OF
 * SUBSTITUTE GOODS  OR SERVICES;  LOSS OF  USE, DATA,  OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER  CAUSED AND  ON ANY  THEORY OF  LIABILITY, WHETHER  IN
 * CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED  OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Template file for the target java in Org.SKB.Lang.Mess.Proto
 *
 * @package    org.skb.lang.mess.proto
 * @author     Sven van der Meer <sven@vandermeer.de>
 * @copyright  2011-2011 Sven van der Meer
 * @license    http://www.opensource.org/licenses/bsd-license.php  BSD License
 * @version    v1.0.0 build 110901 (01-Sep-11) for StringTemplate v3.2.0
 */

group java;

mlcomment_start(dummy) ::= "/*"
mlcomment_end(dummy) ::= "*/"
slcomment(comment) ::= "// <comment>"

messSpecification(body) ::= ""

messDomain(ident) ::= ""

messContentType(ident, mime_ct, value) ::= ""

messField(ident, mime, value) ::= ""

messMessage(ident, extends, fieldDeclarations, fieldDefinitions) ::= <<
public class <ident> <if(extends)>extends <extends><else>extends MessMessageTS<endif> {
  public <ident>(){
    super();
    <fieldDeclarations; separator="\n">
  }

  <fieldDefinitions>
}
>>

messMessageChangeDecl(ident, value) ::= <<
this.changeFieldValue("<ident>", <value>);
>>

messMessageRequiresDecl(ident, value, immutable) ::= <<
this.addField("<ident>", "required", "x-message/bla+foo", <value>, <if(immutable)>"true"<else>"false"<endif>);
>>

messMessageOptionalDecl(ident, value, immutable) ::= <<
this.addField("<ident>", "optional", "x-message/bla+foo", <value>, <if(immutable)>"true"<else>"false"<endif>);
>>

messMessageChangeDef(ident, value) ::= ""

messMessageRequiresDef(ident, value, immutable) ::= <<
<messMessageDef(ident=ident, value=value, immutable=immutable)>
>>

messMessageOptionalDef(ident, value, immutable) ::= <<
<messMessageDef(ident=ident, value=value, immutable=immutable)>
>>

messMessageDef(ident, value, immutable) ::= <<
public String get<ident>(){
  return this.getValue("<ident>");
}

public String get<ident>CT(){
  return this.getMimeCT("<ident>");
}

public String get<ident>Category(){
  return this.getCategory("<ident>");
}

public boolean isImmutable<ident>(){
  return this.isImmutable("<ident>");
}

<if(immutable)><else>
public void set<ident>(String value){
  this.changeFieldValue("<ident>", value);
}
<endif>
>>

messMessageRuntimeAPI() ::= <<
import java.util.Set;

import org.skb.util.composite.TSTableRowAPI;

public interface MessMessageTS_API {
  /**
   * Returns the value of the requested field/column pair.
   * @param ident field identifier
   * @param column name of the column
   * @return value of the column if field exist and column has value, empty string if field exist but column has no value, null if field does not exist
   */
  public String getFieldColumn(String ident, String column);

  /**
   * Returns the MIME content type for the given field
   * @param ident field identifier
   * @return mime content type if field exist and mime content type set, empty string if field exist but no mime content type set, null if field does not exist
   */
  public String getMimeCT(String ident);

  /**
   * Returns the category of the given field.
   * @param ident field identifier
   * @return category, which can be one of: requires, optional, empty string if no category set or null if field does not exist
   */
  public String getCategory(String ident);

  /**
   * Returns the current value of the identified field.
   * @param ident field identifier
   * @return current set value if field exist and value is set, empty string if field exist but no value set, null if field does not exist
   */
  public String getValue(String ident);

  /**
   * Returns a boolean that states whether the field value can be changed by clients or not.
   * @param ident field identifier
   * @return if true, value can be changed, otherwise not
   */
  public Boolean isImmutable(String ident);

  /**
   * Returns a set of the field keys of the message.
   * @return set of field keys
   */
  public Set\<String\> getFieldKeys();

  /**
   * Returns the complete information about a field as a map of key/value pairs
   * @param ident field identifier
   * @return map of key/value pairs with all information on the field or null if field does not exist
   */
  public TSTableRowAPI getField(String ident);
}

>>

messMessageRuntimeImplementation() ::= <<
import java.util.Set;

import org.apache.log4j.Logger;
import org.skb.util.composite.TSBaseAPI;
import org.skb.util.composite.TSRepository.TEnum;
import org.skb.util.composite.TSTableRowAPI;
import org.skb.util.composite.java.TSBoolean;
import org.skb.util.composite.util.TSTable;

public abstract class MessMessageTS implements MessMessageTS_API{
  /** Logger instance */
  public final static Logger logger=Logger.getLogger(MessMessageTS.class);

  /** The local list of atoms as a TreeMap (because insertion sequence determines field positions) */
  protected TSTable fields;

  /** Column identifier for the MIME content type */
  public final static String mmColMimeCT    = "mime";

  /** Column identifier for the category, either optional or requires */
  public final static String mmColCategory  = "category";

  /** Column identifier for the value */
  public final static String mmColValue     = "value";

  /** Column identifier for the immutable flag */
  public final static String mmColImmutable = "immutable";

  /**
   * Class constructor, initialises class members.
   */
  public MessMessageTS(){
    this.fields=new TSTable();
    this.fields.setColumns(MessMessageTS.class.getName(), "mmCol");
  }

  /**
   * Adds a new field to the list, with all information.
   * @param ident field identifier
   * @param category category, must be one of: requires, optional
   * @param mime mime content type for the field
   * @param val current value for the field
   * @param immutable boolean stating whether the field value can be changed by clients or not
   */
  protected void addField(String ident, String category, String mime, String val, String immutable){
    this.fields.addRow(ident);
    this.fields.put(ident, MessMessageTS.mmColCategory, category);
    this.fields.put(ident, MessMessageTS.mmColMimeCT, mime);
    this.fields.put(ident, MessMessageTS.mmColValue, val);
    this.fields.put(ident, MessMessageTS.mmColImmutable, new TSBoolean(Boolean.valueOf(immutable)));
  }

  /**
   * Change the value of a field
   * @param ident field identifier
   * @param value new value
   */
  protected void changeFieldValue(String ident, String value){
    if(this.fields.containsKey(ident)){
      this.fields.put(ident, MessMessageTS.mmColValue, value);
    }
  }

  @Override
  public String getFieldColumn(String ident, String column){
    if(this.fields.containsKey(ident)){
      TSBaseAPI base=this.fields.get(ident, column);
      if(!base.tsIsType(TEnum.TS_DEFAULT))
        return base.toString();
      return "";
    }
    return null;
  }

  @Override
  public String getMimeCT(String ident){
    return this.getFieldColumn(ident, MessMessageTS.mmColMimeCT);
  }

  @Override
  public String getCategory(String ident){
    return this.getFieldColumn(ident, MessMessageTS.mmColCategory);
  }

  @Override
  public String getValue(String ident){
    return this.getFieldColumn(ident, MessMessageTS.mmColValue);
  }

  @Override
  public Boolean isImmutable(String ident){
    if(this.fields.containsKey(ident)){
      TSBaseAPI base=this.fields.get(ident, MessMessageTS.mmColImmutable);
      if(base.tsIsType(TEnum.TS_ATOMIC_JAVA_BOOLEAN))
        return ((TSBoolean)base).tsvalue;
    }
    return null;
  }

  @Override
  public Set\<String\> getFieldKeys(){
    return this.fields.keySet();
  }

  @Override
  public TSTableRowAPI getField(String ident){
    if(this.fields.containsKey(ident))
      return this.fields.get(ident);
    return null;
  }
}
>>