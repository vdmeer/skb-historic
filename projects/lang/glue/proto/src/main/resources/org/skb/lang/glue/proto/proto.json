//
// [The BSD License, http://www.opensource.org/licenses/bsd-license.php]
// Copyright (c) 2010-2011, Sven van der Meer <sven@vandermeer.de>
// All rights reserved.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
// 
//     + Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimer.
//     + Redistributions  in binary  form must  reproduce the  above copyright
//       notice, this list  of conditions and  the following disclaimer  in the
//       documentation and/or other materials provided with the distribution.
//     + Neither the name of the the author nor the names of its contributors
//       may be used to endorse or promote products derived from this software
//       without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS"
// AND ANY EXPRESS  OR IMPLIED WARRANTIES,  INCLUDING, BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY  AND FITNESS FOR A  PARTICULAR PURPOSE
// ARE DISCLAIMED. IN  NO EVENT SHALL  THE COPYRIGHT HOLDER  OR CONTRIBUTORS BE
// LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,   OR
// CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT  LIMITED  TO,  PROCUREMENT  OF
// SUBSTITUTE GOODS  OR SERVICES;  LOSS OF  USE, DATA,  OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER  CAUSED AND  ON ANY  THEORY OF  LIABILITY, WHETHER  IN
// CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED  OF THE
// POSSIBILITY OF SUCH DAMAGE.
//

//
// Configuration file for the Org.SKB.Lang.Glue.Proto
//
// @package    org.skb.lang.glue.proto
// @author     Sven van der Meer <sven@vandermeer.de>
// @copyright  2011-2011 Sven van der Meer
// @license    http://www.opensource.org/licenses/bsd-license.php  BSD License
// @version    v0.30 build 110309 (09-Mar-11)
//

{
    "skb":{
        "tribe":{
            "configuration":{
                "name":{
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"GLUE"
                },
                "name-lc":{
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"glue"
                },
                "copyright":{
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"Copyright (c) 2010-2011 Sven van der Meer <sven@vandermeer.de>"
                },
                "version":{
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"0.30"
                },
                "build":{
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"110309"
                },
                "build-date":{
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"2011-Mar-09"
                },
                "tribe-generic-stg":{
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"\/org\/skb\/lang\/glue\/proto\/stg\/codegen\/internal\/generic.stg"
                }
            }
        },
        "lang":{
            "configuration":{
                "glue":{
                    "skb:util:constant:ident":"internalGlueTgtGlue",
                    "skb:util:constant:javadoc":"Constant to test internally for the target Glue"
                },
                "graphml":{
                    "skb:util:constant:ident":"internalGlueTgtGraphML",
                    "skb:util:constant:javadoc":"Constant to test internally for the target GraphML"
                },
                "sql":{
                    "skb:util:constant:ident":"internalGlueTgtSql",
                    "skb:util:constant:javadoc":"Constant to test internally for the target SQL"
                },
                "internal-scope-sep":{
                    "skb:util:constant:ident":"keyScopeSep",
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"::",
                    "skb:util:constant:javadoc":"Internal scope separator"
                },
                "pr-stats":{
                    "skb:util:constant:ident":"keyPrStat",
                    "skb:value:type":"ts:atomic:java:boolean",
                    "skb:value:default":false,
                    "skb:util:cli:option:long":"pr-stats",
                    "skb:util:cli:option:type":"ts:atomic:java:boolean",
                    "skb:util:cli:descr:short":"Show simple statistic information",
                    "skb:util:constant:javadoc":"Show simple statistic information"
                },
                "pr-stats-all":{
                    "skb:util:constant:ident":"keyPrStatAll",
                    "skb:value:type":"ts:atomic:java:boolean",
                    "skb:value:default":false,
                    "skb:util:cli:option:long":"pr-stats-all",
                    "skb:util:cli:option:type":"ts:atomic:java:boolean",
                    "skb:util:cli:descr:short":"Show complete statistic information",
                    "skb:util:constant:javadoc":"Show complete statistic information"
                },
                "pr-stats-ws":{
                    "skb:util:constant:ident":"keyPrStatsWScope",
                    "skb:value:type":"ts:atomic:java:boolean",
                    "skb:value:default":false,
                    "skb:util:cli:option:long":"pr-stats-ws",
                    "skb:util:cli:option:type":"ts:atomic:java:boolean",
                    "skb:util:cli:descr:short":"No scoped names in statistics",
                    "skb:util:constant:javadoc":"Don't use scoped names in statistics"
                },
                "pr-stg-stats":{
                    "skb:util:constant:ident":"keyPrStgFileStats",
                    "skb:value:type":"ts:atomic:java:boolean",
                    "skb:value:default":false,
                    "skb:util:cli:option:long":"pr-stg-stats",
                    "skb:util:cli:option:type":"ts:atomic:java:boolean",
                    "skb:util:cli:descr:short":"Print statistics string template",
                    "skb:util:constant:javadoc":"Print the string template used for statistics"
                },
                "stat-stg":{
                    "skb:util:constant:ident":"keyStatStg",
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"\/org\/skb\/lang\/glue\/proto\/stg\/statistics.stg",
                    "skb:util:cli:option:long":"stat-stg",
                    "skb:util:cli:descr:arguments":"file",
                    "skb:util:cli:option:type":"ts:atomic:java:string",
                    "skb:util:cli:descr:short":"Group template file for statistics",
                    "skb:util:constant:javadoc":"Group template for statistics"
                }
            },
            "targets":{
                "glue":{
                    "tgt-stg":{
                            "skb:value:default":"\/org\/skb\/lang\/glue\/proto\/stg\/codegen\/targets\/glue.stg"
                    },
                    "tgt-fileext":{
                            "skb:value:default":".glue"
                    },
                    "gc-scope-sep":{
                            "skb:value:default":"::"
                    },
                    "skb:lang:target:config:cli":{
                        "xt-do-includes":{
                            "skb:util:constant:ident":"keyXtDoIncludes",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"xt-do-includes",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Generate includes",
                            "skb:util:constant:javadoc":"Generate includes"
                        },
                        "tgt-split-code":{
                            "skb:util:constant:ident":"keyTgSplitCode",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"tgt-split-code",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Split code (i.e. packages in directories, elements and facilities in files)",
                            "skb:util:constant:javadoc":"Split code (i.e. packages in directories, elements and facilities in files)"
                        },
                        "tgt-sc-by-pkg":{
                            "skb:util:constant:ident":"keyTgSCbyPackage",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"tgt-sc-by-pkg",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Split code by package",
                            "skb:util:constant:javadoc":"Split code by package"
                        },
                        "tgt-sc-by-category":{
                            "skb:util:constant:ident":"keyTgSCbyAtomCategory",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"tgt-sc-by-category",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Split code by atom category (i.e. element, struct)",
                            "skb:util:constant:javadoc":"Split code by atom category (i.e. element, struct)"
                        }
                    }
                },
                "graphml":{
                    "tgt-stg":{
                            "skb:value:default":"\/org\/skb\/lang\/glue\/proto\/stg\/codegen\/targets\/graphml.stg"
                    },
                    "tgt-fileext":{
                            "skb:value:default":".graphml"
                    },
                    "gc-scope-sep":{
                            "skb:value:default":"::"
                    },
                    "tgt-stg-angle-br":{
                        "skb:value:default":false
                    },
                    "skb:lang:target:config:cli":{
                        "xt-do-includes":{
                            "skb:util:constant:ident":"keyXtDoIncludes",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"xt-do-includes",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Generate includes",
                            "skb:util:constant:javadoc":"Generate includes"
                        },
                        "tgt-split-code":{
                            "skb:util:constant:ident":"keyTgSplitCode",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:constant:javadoc":"Split code (i.e. packages in directories, elements and facilities in files)"
                        }
                    }
                },
                "sql":{
                    "tgt-stg":{
                            "skb:value:default":"\/org\/skb\/lang\/glue\/proto\/stg\/codegen\/targets\/sql.stg"
                    },
                    "tgt-fileext":{
                            "skb:value:default":".sql"
                    },
                    "gc-scope-sep":{
                            "skb:value:default":"::"
                    },
                    "skb:lang:target:config:cli":{
                        "xt-do-includes":{
                            "skb:util:constant:ident":"keyXtDoIncludes",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"xt-do-includes",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Generate includes",
                            "skb:util:constant:javadoc":"Generate includes"
                        },
                        "tgt-split-code":{
                            "skb:util:constant:ident":"keyTgSplitCode",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:constant:javadoc":"Split code (i.e. packages in directories, elements and facilities in files)"
                        }
                    }
                }
            },

            "stgchunks":{
                "mlcomment_start":{
                    "skb:stringtemplate:chunks:mandatory": ["dummy"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "mlcomment_end":{
                    "skb:stringtemplate:chunks:mandatory": ["dummy"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "slcomment":{
                    "skb:stringtemplate:chunks:mandatory": ["comment"],
                    "skb:stringtemplate:chunks:optional":  []
                },

                "glueSpecification":{
                    "skb:stringtemplate:chunks:mandatory": ["id"],
                    "skb:stringtemplate:chunks:optional":  []
                },

                "const_value":{
                    "skb:stringtemplate:chunks:mandatory": ["type", "val"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "scoped_name":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "add"],
                    "skb:stringtemplate:chunks:optional":  []
                }
            },

            "tokens":{
                // for parser
                "parserARRAY":{
                    "skb:util:constant:ident":"parserARRAY",
                    "skb:util:constant:value":"array",
                    "skb:util:constant:javadoc":"Parser - Array"
                },
                "parserIDENTIFIER":{
                    "skb:util:constant:ident":"parserIDENTIFIER",
                    "skb:util:constant:value":"identifier",
                    "skb:util:constant:javadoc":"Parser - Identifier"
                },
                "parserScopedName":{
                    "skb:util:constant:ident":"parserScopedName",
                    "skb:util:constant:value":"scoped_name",
                    "skb:util:constant:javadoc":"Parser - Scoped Name"
                },
                "parserScopeSep":{
                    "skb:util:constant:ident":"parserScopeSep",
                    "skb:util:constant:value":"::",
                    "skb:util:constant:javadoc":"Parser - Scope Separator"
                },
                "gcMiscParrentID":{
                    "skb:util:constant:ident":"gcMiscParrentID",
                    "skb:util:constant:value":"parrentId",
                    "skb:util:constant:javadoc":"Generate Code - parrent Identifier"
                },
                "gcMiscParrentCat":{
                    "skb:util:constant:ident":"gcMiscParrentCat",
                    "skb:util:constant:value":"parrentCategory",
                    "skb:util:constant:javadoc":"Generate Code - parrent Category"
                },
                "gcMiscCurrentCat":{
                    "skb:util:constant:ident":"gcMiscCurrentCat",
                    "skb:util:constant:value":"currentCategory",
                    "skb:util:constant:javadoc":"Generate Code - current Category"
                },
                "gcMiscInDefinition":{
                    "skb:util:constant:ident":"gcMiscInDefinition",
                    "skb:util:constant:value":"inDefinition",
                    "skb:util:constant:javadoc":"Generate Code - in a Definition"
                },
                "gcMiscInItem":{
                    "skb:util:constant:ident":"gcMiscInItem",
                    "skb:util:constant:value":"inItem",
                    "skb:util:constant:javadoc":"Generate Code - in an Item"
                },
                "gcMiscInContract":{
                    "skb:util:constant:ident":"gcMiscInContract",
                    "skb:util:constant:value":"inContract",
                    "skb:util:constant:javadoc":"Generate Code - in a Contract"
                },
                "gcMiscInPackage":{
                    "skb:util:constant:ident":"gcMiscInPackage",
                    "skb:util:constant:value":"inPackage",
                    "skb:util:constant:javadoc":"Generate Code - in a Package"
                },
                "gcMiscInElement":{
                    "skb:util:constant:ident":"gcMiscInElement",
                    "skb:util:constant:value":"inElement",
                    "skb:util:constant:javadoc":"Generate Code - in an Element"
                },
                "gcMiscInFacility":{
                    "skb:util:constant:ident":"gcMiscInFacility",
                    "skb:util:constant:value":"inFacility",
                    "skb:util:constant:javadoc":"Generate Code - in a Facility"
                },
                "gcMiscInAction":{
                    "skb:util:constant:ident":"gcMiscInAction",
                    "skb:util:constant:value":"inAction",
                    "skb:util:constant:javadoc":"Generate Code - in an Action"
                },
                "gcMiscInStruct":{
                    "skb:util:constant:ident":"gcMiscInStruct",
                    "skb:util:constant:value":"inStruct",
                    "skb:util:constant:javadoc":"Generate Code - in a Structure"
                },
                "gcMiscSpecName":{
                    "skb:util:constant:ident":"gcMiscSpecName",
                    "skb:util:constant:value":"specificationName",
                    "skb:util:constant:javadoc":"Generate Code - Specification Name"
                },
                "gcMiscCurrentScope":{
                    "skb:util:constant:ident":"gcMiscCurrentScope",
                    "skb:util:constant:value":"currentScope",
                    "skb:util:constant:javadoc":"Generate Code - Current Scope"
                },


                // GLUE Keywords
                "glueTopology":{
                    "skb:util:constant:ident":"glueTopology",
                    "skb:util:constant:value":"topology",
                    "skb:lang:target:token:ident":"SPECIFICATION",
                    "skb:lang:target:token:translate":"keyword 'topology'",
                    "skb:util:constant:javadoc":"Topology Keyword"
                },
                "glueNode":{
                    "skb:util:constant:ident":"glueNode",
                    "skb:util:constant:value":"node",
                    "skb:lang:target:token:ident":"NODE",
                    "skb:lang:target:token:translate":"keyword 'node'",
                    "skb:util:constant:javadoc":"Node Keyword"
                },
                "glueConnection":{
                    "skb:util:constant:ident":"glueConnection",
                    "skb:util:constant:value":"connection",
                    "skb:lang:target:token:ident":"CONNECTION",
                    "skb:lang:target:token:translate":"keyword 'connection'",
                    "skb:util:constant:javadoc":"Connection Keyword"
                },
                "glueInterface":{
                    "skb:util:constant:ident":"glueInterface",
                    "skb:util:constant:value":"interface",
                    "skb:lang:target:token:ident":"INTERFACE",
                    "skb:lang:target:token:translate":"keyword 'interface'",
                    "skb:util:constant:javadoc":"Interface Keyword"
                },
                "glueComponent":{
                    "skb:util:constant:ident":"glueComponent",
                    "skb:util:constant:value":"component",
                    "skb:lang:target:token:ident":"COMPONENT",
                    "skb:lang:target:token:translate":"keyword 'component'",
                    "skb:util:constant:javadoc":"Component Keyword"
                },
                "glueDirected":{
                    "skb:util:constant:ident":"glueDirected",
                    "skb:util:constant:value":"directed",
                    "skb:lang:target:token:ident":"DIRECTED",
                    "skb:lang:target:token:translate":"keyword 'directed'",
                    "skb:util:constant:javadoc":"Directed Keyword"
                },
                "glueSource":{
                    "skb:util:constant:ident":"glueSource",
                    "skb:util:constant:value":"source",
                    "skb:lang:target:token:ident":"SOURCE",
                    "skb:lang:target:token:translate":"keyword 'source'",
                    "skb:util:constant:javadoc":"Source Keyword"
                },
                "glueTarget":{
                    "skb:util:constant:ident":"glueTarget",
                    "skb:util:constant:value":"target",
                    "skb:lang:target:token:ident":"TARGET",
                    "skb:lang:target:token:translate":"keyword 'target'",
                    "skb:util:constant:javadoc":"Target Keyword"
                },
                "gluePort":{
                    "skb:util:constant:ident":"gluePort",
                    "skb:util:constant:value":"port",
                    "skb:lang:target:token:ident":"PORT",
                    "skb:lang:target:token:translate":"keyword 'port'",
                    "skb:util:constant:javadoc":"Port Keyword"
                },
                "glueSourcePort":{
                    "skb:util:constant:ident":"glueSourcePort",
                    "skb:util:constant:value":"sourceport",
                    "skb:lang:target:token:ident":"SOURCEPORT",
                    "skb:lang:target:token:translate":"keyword 'sourceport'",
                    "skb:util:constant:javadoc":"Source Port Keyword"
                },
                "glueTargetPort":{
                    "skb:util:constant:ident":"glueTargetPort",
                    "skb:util:constant:value":"targetport",
                    "skb:lang:target:token:ident":"TARGETPORT",
                    "skb:lang:target:token:translate":"keyword 'targetport'",
                    "skb:util:constant:javadoc":"Target Port Keyword"
                },
                "glueDomain":{
                    "skb:util:constant:ident":"glueDomain",
                    "skb:util:constant:value":"domain",
                    "skb:lang:target:token:ident":"DOMAIN",
                    "skb:lang:target:token:translate":"keyword 'domain'",
                    "skb:util:constant:javadoc":"Domain Keyword"
                },
                "glueContracts":{
                    "skb:util:constant:ident":"glueContracts",
                    "skb:util:constant:value":"contracts",
                    "skb:lang:target:token:ident":"CONTRACTS",
                    "skb:lang:target:token:translate":"keyword 'contracts'",
                    "skb:util:constant:javadoc":"Contracts Keyword"
                },
                "gluePolicies":{
                    "skb:util:constant:ident":"gluePolicies",
                    "skb:util:constant:value":"policies",
                    "skb:lang:target:token:ident":"POLICIES",
                    "skb:lang:target:token:translate":"keyword 'policies'",
                    "skb:util:constant:javadoc":"Policies Keyword"
                },


                // GLUE Keywords -> TYPES
                "glueBINARY":{
                    "skb:util:constant:ident":"glueBINARY",
                    "skb:util:constant:value":"binary",
                    "skb:lang:target:token:ident":"BINARY",
                    "skb:lang:target:token:translate":"keyword 'binary'",
                    "skb:util:constant:javadoc":"Binary Keyword"
                },
                "glueBOOLEAN":{
                    "skb:util:constant:ident":"glueBOOLEAN",
                    "skb:util:constant:value":"boolean",
                    "skb:lang:target:token:ident":"BOOLEAN",
                    "skb:lang:target:token:translate":"keyword 'boolean'",
                    "skb:util:constant:javadoc":"Boolean Keyword"
                },
                "glueCHAR":{
                    "skb:util:constant:ident":"glueCHAR",
                    "skb:util:constant:value":"char",
                    "skb:lang:target:token:ident":"CHAR",
                    "skb:lang:target:token:translate":"keyword 'char'",
                    "skb:util:constant:javadoc":"Char Keyword"
                },
                "glueDOUBLE":{
                    "skb:util:constant:ident":"glueDOUBLE",
                    "skb:util:constant:value":"double",
                    "skb:lang:target:token:ident":"DOUBLE",
                    "skb:lang:target:token:translate":"keyword 'double'",
                    "skb:util:constant:javadoc":"Double Keyword"
                },
                "glueFLOAT":{
                    "skb:util:constant:ident":"glueFLOAT",
                    "skb:util:constant:value":"float",
                    "skb:lang:target:token:ident":"FLOAT",
                    "skb:lang:target:token:translate":"keyword 'float'",
                    "skb:util:constant:javadoc":"Float Keyword"
                },
                "glueHEX":{
                    "skb:util:constant:ident":"glueHEX",
                    "skb:util:constant:value":"hex",
                    "skb:lang:target:token:ident":"HEX",
                    "skb:lang:target:token:translate":"keyword 'hex'",
                    "skb:util:constant:javadoc":"Hex Keyword"
                },
                "glueINTEGER":{
                    "skb:util:constant:ident":"glueINTEGER",
                    "skb:util:constant:value":"integer",
                    "skb:lang:target:token:ident":"INTEGER",
                    "skb:lang:target:token:translate":"keyword 'integer'",
                    "skb:util:constant:javadoc":"Integer Keyword"
                },
                "glueLONG":{
                    "skb:util:constant:ident":"glueLONG",
                    "skb:util:constant:value":"long",
                    "skb:lang:target:token:ident":"LONG",
                    "skb:lang:target:token:translate":"keyword 'long'",
                    "skb:util:constant:javadoc":"Long Keyword"
                },
                "glueOCTET":{
                    "skb:util:constant:ident":"glueOCTET",
                    "skb:util:constant:value":"octet",
                    "skb:lang:target:token:ident":"OCTET",
                    "skb:lang:target:token:translate":"keyword 'octet'",
                    "skb:util:constant:javadoc":"Octet Keyword"
                },
                "glueSHORT":{
                    "skb:util:constant:ident":"glueSHORT",
                    "skb:util:constant:value":"short",
                    "skb:lang:target:token:ident":"SHORT",
                    "skb:lang:target:token:translate":"keyword 'short'",
                    "skb:util:constant:javadoc":"Short Keyword"
                },
                "glueSTRING":{
                    "skb:util:constant:ident":"glueSTRING",
                    "skb:util:constant:value":"string",
                    "skb:lang:target:token:ident":"STRING",
                    "skb:lang:target:token:translate":"keyword 'string'",
                    "skb:util:constant:javadoc":"String Keyword"
                },
                "glueVOID":{
                    "skb:util:constant:ident":"glueVOID",
                    "skb:util:constant:value":"void",
                    "skb:lang:target:token:ident":"VOID",
                    "skb:lang:target:token:translate":"keyword 'void'",
                    "skb:util:constant:javadoc":"Void Keyword"
                },


                // GLUE Keywords -> VALUES
                "glueFALSE":{
                    "skb:util:constant:ident":"glueFALSE",
                    "skb:util:constant:value":"FALSE",
                    "skb:lang:target:token:ident":"FALSE",
                    "skb:lang:target:token:translate":"keyword 'FALSE'",
                    "skb:util:constant:javadoc":"False Value"
                },
                "glueNULL":{
                    "skb:util:constant:ident":"glueNULL",
                    "skb:util:constant:value":"NULL",
                    "skb:lang:target:token:ident":"NULL",
                    "skb:lang:target:token:translate":"keyword 'NULL'",
                    "skb:util:constant:javadoc":"NULL Value"
                },
                "glueTRUE":{
                    "skb:util:constant:ident":"glueTRUE",
                    "skb:util:constant:value":"TRUE",
                    "skb:lang:target:token:ident":"TRUE",
                    "skb:lang:target:token:translate":"keyword 'TRUE'",
                    "skb:util:constant:javadoc":"TRUE Value"
                },


                //for lexer to print proper error messages
                "glueCPP_DIRECTIVE":{
                    "skb:util:constant:ident":"glueCPP_DIRECTIVE",
                    "skb:util:constant:value":"preprocessor directive",
                    "skb:lang:target:token:ident":"CPP_DIRECTIVE",
                    "skb:lang:target:token:translate":"preprocessor directive",
                    "skb:util:constant:javadoc":"CPP Directive"
                },
                "glueESC":{
                    "skb:util:constant:ident":"glueESC",
                    "skb:util:constant:value":"escape sequence",
                    "skb:lang:target:token:ident":"ESC",
                    "skb:lang:target:token:translate":"escape sequence",
                    "skb:util:constant:javadoc":"Esc Sequence"
                },
                "glueFloatSuffix":{
                    "skb:util:constant:ident":"glueFloatSuffix",
                    "skb:util:constant:value":"floating point suffix",
                    "skb:lang:target:token:ident":"FloatSuffix",
                    "skb:lang:target:token:translate":"floating point suffix",
                    "skb:util:constant:javadoc":"Float Suffix"
                },
                "glueHexDigit":{
                    "skb:util:constant:ident":"glueHexDigit",
                    "skb:util:constant:value":"hexadecimal digit",
                    "skb:lang:target:token:ident":"HexDigit",
                    "skb:lang:target:token:translate":"hexadecimal digit",
                    "skb:util:constant:javadoc":"Hex Digit"
                },
                "glueIDENT":{
                    "skb:util:constant:ident":"glueIDENT",
                    "skb:util:constant:value":"identifier",
                    "skb:lang:target:token:ident":"IDENT",
                    "skb:lang:target:token:translate":"an identifier",
                    "skb:util:constant:javadoc":"Identifier"
                },
                "glueINLINE_CODE":{
                    "skb:util:constant:ident":"glueINLINE_CODE",
                    "skb:util:constant:value":"inline code",
                    "skb:lang:target:token:ident":"INLINE_CODE",
                    "skb:lang:target:token:translate":"inline code",
                    "skb:util:constant:javadoc":"Inline Code"
                },
                "glueML_COMMENT":{
                    "skb:util:constant:ident":"glueML_COMMENT",
                    "skb:util:constant:value":"multiple line comment",
                    "skb:lang:target:token:ident":"ML_COMMENT",
                    "skb:lang:target:token:translate":"multiple line comment",
                    "skb:util:constant:javadoc":"Multi Line Comment"
                },
                "glueOctDigit":{
                    "skb:util:constant:ident":"glueOctDigit",
                    "skb:util:constant:value":"otcal digit",
                    "skb:lang:target:token:ident":"OctDigit",
                    "skb:lang:target:token:translate":"otcal digit",
                    "skb:util:constant:javadoc":"Oct Digit"
                },
                "glueOctalEscape":{
                    "skb:util:constant:ident":"glueOctalEscape",
                    "skb:util:constant:value":"octal escape sequence",
                    "skb:lang:target:token:ident":"OctalEscape",
                    "skb:lang:target:token:translate":"octal escape sequence",
                    "skb:util:constant:javadoc":"Octal Escape"
                },
                "glueSL_COMMENT":{
                    "skb:util:constant:ident":"glueSL_COMMENT",
                    "skb:util:constant:value":"single line comment",
                    "skb:lang:target:token:ident":"SL_COMMENT",
                    "skb:lang:target:token:translate":"single line comment",
                    "skb:util:constant:javadoc":"Single Line Comment"
                },
                "glueUnicodeEscape":{
                    "skb:util:constant:ident":"glueUnicodeEscape",
                    "skb:util:constant:value":"unicode escape sequence",
                    "skb:lang:target:token:ident":"UnicodeEscape",
                    "skb:lang:target:token:translate":"unicode escape sequence",
                    "skb:util:constant:javadoc":"Unicode Escape"
                },
                "glueVAL_BINARY":{
                    "skb:util:constant:ident":"glueVAL_BINARY",
                    "skb:util:constant:value":"binary value",
                    "skb:lang:target:token:ident":"VAL_BINARY",
                    "skb:lang:target:token:translate":"binary value",
                    "skb:util:constant:javadoc":"Binary Value"
                },
                "glueVAL_CHAR":{
                    "skb:util:constant:ident":"glueVAL_CHAR",
                    "skb:util:constant:value":"character value",
                    "skb:lang:target:token:ident":"VAL_CHAR",
                    "skb:lang:target:token:translate":"character value",
                    "skb:util:constant:javadoc":"Char Value"
                },
                "glueVAL_FLOAT":{
                    "skb:util:constant:ident":"glueVAL_FLOAT",
                    "skb:util:constant:value":"floating point value",
                    "skb:lang:target:token:ident":"VAL_FLOAT",
                    "skb:lang:target:token:translate":"floating point value",
                    "skb:util:constant:javadoc":"Float Value"
                },
                "glueVAL_HEX":{
                    "skb:util:constant:ident":"glueVAL_HEX",
                    "skb:util:constant:value":"hexadecimal value",
                    "skb:lang:target:token:ident":"VAL_HEX",
                    "skb:lang:target:token:translate":"hexadecimal value",
                    "skb:util:constant:javadoc":"Hex Value"
                },
                "glueVAL_INTEGER":{
                    "skb:util:constant:ident":"glueVAL_INTEGER",
                    "skb:util:constant:value":"integer value",
                    "skb:lang:target:token:ident":"VAL_INTEGER",
                    "skb:lang:target:token:translate":"integer value",
                    "skb:util:constant:javadoc":"Integer Value"
                },
                "glueVAL_OCT":{
                    "skb:util:constant:ident":"glueVAL_OCT",
                    "skb:util:constant:value":"octal value",
                    "skb:lang:target:token:ident":"VAL_OCT",
                    "skb:lang:target:token:translate":"octal value",
                    "skb:util:constant:javadoc":"Oct Value"
                },
                "glueVAL_STRING":{
                    "skb:util:constant:ident":"glueVAL_STRING",
                    "skb:util:constant:value":"string value",
                    "skb:lang:target:token:ident":"VAL_STRING",
                    "skb:lang:target:token:translate":"string value",
                    "skb:util:constant:javadoc":"String Value"
                },
                "glueWS":{
                    "skb:util:constant:ident":"glueWS",
                    "skb:util:constant:value":"whitespace",
                    "skb:lang:target:token:ident":"WS",
                    "skb:lang:target:token:translate":"whitespace",
                    "skb:util:constant:javadoc":"White space"
                },


                //for lexer to print proper error messages
                ";":{
                    "skb:lang:target:token:ident":"';'",
                    "skb:lang:target:token:translate":"character ';'"
                },
                "}":{
                    "skb:lang:target:token:ident":"'}'",
                    "skb:lang:target:token:translate":"character '}'"
                },
                "=":{
                    "skb:lang:target:token:ident":"'='",
                    "skb:lang:target:token:translate":"character '='"
                },
                "(":{
                    "skb:lang:target:token:ident":"'('",
                    "skb:lang:target:token:translate":"character '('"
                },
                ":":{
                    "skb:lang:target:token:ident":"':'",
                    "skb:lang:target:token:translate":"character ':'"
                },
                "::":{
                    "skb:lang:target:token:ident":"'::'",
                    "skb:lang:target:token:translate":"scope operator '::'"
                },
                "[":{
                    "skb:lang:target:token:ident":"'['",
                    "skb:lang:target:token:translate":"character '['"
                },
                ",":{
                    "skb:lang:target:token:ident":"','",
                    "skb:lang:target:token:translate":"character ','"
                },
                ")":{
                    "skb:lang:target:token:ident":"')'",
                    "skb:lang:target:token:translate":"character ')'"
                },
                "{":{
                    "skb:lang:target:token:ident":"'{'",
                    "skb:lang:target:token:translate":"character '{'"
                },
                "]":{
                    "skb:lang:target:token:ident":"']'",
                    "skb:lang:target:token:translate":"character ']'"
                }
            },

            "rules":{
            }
        }
    }
}
