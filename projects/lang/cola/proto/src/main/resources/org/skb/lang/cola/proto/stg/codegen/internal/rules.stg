/* Copyright (c) 2004-2011 Sven van der Meer
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and  binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     + Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     + Redistributions  in binary  form must  reproduce the  above copyright
 *       notice, this list  of conditions and  the following disclaimer  in the
 *       documentation and/or other materials provided with the distribution.
 *     + Neither the name of the the author nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS"
 * AND ANY EXPRESS  OR IMPLIED WARRANTIES,  INCLUDING, BUT NOT  LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY  AND FITNESS FOR A  PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN  NO EVENT SHALL  THE COPYRIGHT HOLDER  OR CONTRIBUTORS BE
 * LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,   OR
 * CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT  LIMITED  TO,  PROCUREMENT  OF
 * SUBSTITUTE GOODS  OR SERVICES;  LOSS OF  USE, DATA,  OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER  CAUSED AND  ON ANY  THEORY OF  LIABILITY, WHETHER  IN
 * CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED  OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Template file for Cola.Proto language rules in Org.SKB.Lang.Cola.Proto
 *
 * @package    org.skb.lang.cola.proto
 * @author     Sven van der Meer <sven@vandermeer.de>
 * @copyright  2011-2011 Sven van der Meer
 * @license    http://www.opensource.org/licenses/bsd-license.php  BSD License
 * @version    v1.0.0 build 110901 (01-Sep-11) for StringTemplate v3.2.0
 */

group rules;


contract02(do_error, do_descr, ident, category) ::= <<
<if(do_error)>
used contract \<<ident>\> is not specified for \<<category>\>
<endif>
<if(do_descr)>
  Contract Rule 02: ##add explanation##
<endif>
>>

contract03(do_error, do_descr, contract, category, atom) ::= <<
<if(do_error)>
missing mandatory contract \<<contract>\> for <category> \<<atom>\>
       ==\> all mandatory contracts need to be declared
<endif>
<if(do_descr)>
  Contract Rule 03: ##add explanation##
<endif>
>>

contract04(do_error, do_descr, contract, category, atom) ::= <<
<if(do_error)>
missing required contract \<<contract>\> for <category> \<<atom>\>
       ==\> all required contracts need to be declared
<endif>
<if(do_descr)>
  Contract Rule 04: ##add explanation##
<endif>
>>

contract05(do_error, do_descr, scope, ident) ::= <<
<if(do_error)>
scope for atom \<<scope>\> redefined in contract \<<ident>\>
<endif>
<if(do_descr)>
  Contract Rule 05: ##add explanation##
<endif>
>>

contract06(do_error, do_descr, ident, contracts) ::= <<
<if(do_error)>
problem with contract definitions for \<<ident>\>
       ==\> the following contracts cannot be defined for this atom: <contracts; separator=", ">
<endif>
<if(do_descr)>
  Contract Rule 16: ##add explanation##
<endif>
>>

scopename01(do_error, do_descr, scoped_name) ::= <<
<if(do_error)>
invalid scoped name \<<scoped_name>\>, no atom of that name declared
       ==\> cannot reference undeclared atoms
<endif>
<if(do_descr)>
  Scoped Name Rule 01: ##add explanation##
<endif>
>>

scopename02(do_error, do_descr, scoped_name, leaf_category) ::= <<
<if(do_error)>
invalid scoped name \<<scoped_name>\>, parts of the scoped name are wrong
       ==\> \<<scoped_name>\> of type \<<leaf_category>\> cannot be used as part of a scoped name
<endif>
<if(do_descr)>
  Scoped Name Rule 02: ##add explanation##
<endif>
>>

scopename03(do_error, do_descr, scoped_name, current_atom, reason) ::= <<
<if(do_error)>
scoped name used more than once in same context
       ==\> \<<scoped_name>\> for atom \<<current_atom>\> already used in context \<<reason>\>
<endif>
<if(do_descr)>
  Scoped Name Rule 03: ##add explanation##
<endif>
>>

scopename04(do_error, do_descr, scoped_name, category) ::= <<
<if(do_error)>
scoped name is not a property, it points to \<<category>\>
       ==\> \<<scoped_name>\> in propery definition does not point to a property
<endif>
<if(do_descr)>
  Scoped Name Rule 04: ##add explanation##
<endif>
>>

scopename05(do_error, do_descr, scoped_name, category) ::= <<
<if(do_error)>
scoped name is not a contract, it points to \<<category>\>
       ==\> \<<scoped_name>\> in contract definition does not point to a contract
<endif>
<if(do_descr)>
  Scoped Name Rule 05: ##add explanation##
<endif>
>>

scopename06(do_error, do_descr, scoped_name, current_atom_category, scoped_name_category) ::= <<
<if(do_error)>
invalide scoped name \<<scoped_name>\>
       ==\> cannot use a \<<scoped_name_category>\> for \<<current_atom_category>\>
<endif>
<if(do_descr)>
  Scoped Name Rule 06: ##add explanation##
<endif>
>>

identifier01(do_error, do_descr, ident, category, previous) ::= <<
<if(do_error)>
identifier used more than once
       ==\> identifier \<<ident>\> as \<<category>\><if(previous)>, previously defined as <previous><endif>
<endif>
<if(do_descr)>
  Identifier Rule 01: ##add explanation##
<endif>
>>

identifier02(do_error, do_descr, ident) ::= <<
<if(do_error)>
identifier used more than once
       ==\> identifier \<<ident>\> in context property definitions
<endif>
<if(do_descr)>
  Identifier Rule 02: ##add explanation##
<endif>
>>

identifier03(do_error, do_descr, ident) ::= <<
<if(do_error)>
identifier used more than once
       ==\> identifier \<<ident>\> in context contract definitions
<endif>
<if(do_descr)>
  Identifier Rule 03: ##add explanation##
<endif>
>>

property01(do_error, do_descr, property, category, atom) ::= <<
<if(do_error)>
missing mandatory property \<<property>\> for <category> \<<atom>\>
       ==\> all mandatory properties need to be declared
<endif>
<if(do_descr)>
  Property Rule 01: ##add explanation##
<endif>
>>

property02(do_error, do_descr, property, category, atom) ::= <<
<if(do_error)>
missing required property \<<property>\> for <category> \<<atom>\>
       ==\> all required properties need to be declared
<endif>
<if(do_descr)>
  Property Rule 02: ##add explanation##
<endif>
>>

property03(do_error, do_descr, ident) ::= <<
<if(do_error)>
missing value for required property \<<ident>\>, one empty value given
       ==\> required properties must be declared non-empty
<endif>
<if(do_descr)>
  Property Rule 03: ##add explanation##
<endif>
>>

property04(do_error, do_descr, ident) ::= <<
<if(do_error)>
missing value for required property \<<ident>\>, no value given
       ==\> required properties must be declared non-empty
<endif>
<if(do_descr)>
  Property Rule 04: ##add explanation##
<endif>
>>

property05(do_error, do_descr, ident, values) ::= <<
<if(do_error)>
potential type mismatch for property definition \<<ident>\>
       ==\> array expected, but only \<<values>\> value given
<endif>
<if(do_descr)>
  Property Rule 05: ##add explanation##
<endif>
>>

property06(do_error, do_descr, ident, values) ::= <<
<if(do_error)>
type mismatch for property definition \<<ident>\>
       ==\> \<<values>\> values given for a non-array type
<endif>
<if(do_descr)>
  Property Rule 06: ##add explanation##
<endif>
>>

property09(do_error, do_descr, ident, category) ::= <<
<if(do_error)>
used property \<<ident>\> is not specified for \<<category>\>
       ==\> note: typedef, struct and member are handled as attributes
<endif>
<if(do_descr)>
  Property Rule 09: ##add explanation##
<endif>
>>

property11(do_error, do_descr, ident, category) ::= <<
<if(do_error)>
empty description in \<<category>\> \<<ident>\>
       ==\> description needs to be a non-empty string
<endif>
<if(do_descr)>
  Property Rule 11: ##add explanation##
<endif>
>> 

property12(do_error, do_descr, ident, base_type, const_type, base_type_file, base_type_line, base_type_col) ::= <<
<if(do_error)>
type mismatch for property declaration \<<ident>\>
       ==\> type declared is \<<base_type>\>, value associated is of type \<<const_type>\>
<endif>
<if(do_descr)>
  Property Rule 12: ##add explanation##
<endif>
>>

property13(do_error, do_descr, ident, base_type, const_type, base_type_file, base_type_line, base_type_col) ::= <<
<if(do_error)>
potential type mismatch for property declaration \<<ident>\>
       ==\> type declared is \<<base_type>\>, value associated is of type \<<const_type>\>
<endif>
<if(do_descr)>
  Property Rule 13: ##add explanation##
<endif>
>>

property14(do_error, do_descr, scope, ident) ::= <<
<if(do_error)>
scope for atom \<<scope>\> redefined in property \<<ident>\>
<endif>
<if(do_descr)>
  Property Rule 14: ##add explanation##
<endif>
>>

property15(do_error, do_descr, ident, properties) ::= <<
<if(do_error)>
problem with propery definitions for \<<ident>\>
       ==\> the following properties cannot be defined for this atom: <properties; separator=", ">
<endif>
<if(do_descr)>
  Property Rule 15: ##add explanation##
<endif>
>>


found(category, file, line, column) ::= <<
 <if(category)>\<<category>\><endif><if(file)> in file <file><endif>:<if(line)><line><endif>:<if(column)><column><endif>
 >>