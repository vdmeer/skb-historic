/* Copyright (c) 2008-2011 Sven van der Meer
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and  binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     + Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     + Redistributions  in binary  form must  reproduce the  above copyright
 *       notice, this list  of conditions and  the following disclaimer  in the
 *       documentation and/or other materials provided with the distribution.
 *     + Neither the name of the the author nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS"
 * AND ANY EXPRESS  OR IMPLIED WARRANTIES,  INCLUDING, BUT NOT  LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY  AND FITNESS FOR A  PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN  NO EVENT SHALL  THE COPYRIGHT HOLDER  OR CONTRIBUTORS BE
 * LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,   OR
 * CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT  LIMITED  TO,  PROCUREMENT  OF
 * SUBSTITUTE GOODS  OR SERVICES;  LOSS OF  USE, DATA,  OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER  CAUSED AND  ON ANY  THEORY OF  LIABILITY, WHETHER  IN
 * CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED  OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Template file for the target xml in Org.SKB.Lang.Cola.Proto
 *
 * @package    org.skb.lang.cola.proto
 * @author     Sven van der Meer <sven@vandermeer.de>
 * @copyright  2011-2011 Sven van der Meer
 * @license    http://www.opensource.org/licenses/bsd-license.php  BSD License
 * @version    v0.30 build 110309 (09-Mar-11) for StringTemplate v3.2.1
 */

group xml;

mlcomment_start(dummy) ::= "<!--"
mlcomment_end(dummy) ::= "-->"
slcomment(comment) ::= "<!-- $comment$ -->"

colaPropertyDecl(id, type, val, array, propertyScope, appl, aExtends, aRequires, alterable, negotiable, priorityBT, priorityCV, evaluate, description, misc) ::= <<
property $id$: @type($type$$if(array)$[]$endif$ = $val; separator=", "$),
  @scope([contract, $propertyScope.contract$],
         [package, $propertyScope.package$], [element, $propertyScope.element$], [facility, $propertyScope.facility$],
         [action, $propertyScope.action$], [attribute, $propertyScope.attribute$], [parameter, $propertyScope.parameter$]),
  $appl$,
  $if(aExtends)$  extends($aExtends; separator=", "$),$endif$
  $if(aRequires)$  requires($aRequires; separator=", "$),$endif$
  $if(alterable)$  @alterable,$endif$
  $if(negotiable)$  @negotiable,$endif$
  $if(priorityBT)$  @priority($priorityBT$ = $priorityCV$),$endif$
  $if(evaluate)$  $evaluate; separator="\n  "$,$endif$
  @description($description.token$);

>>

aApplicability(appl) ::= <<@applicability($appl; separator=", "$)>>
propertyEvaluate(appl, code) ::= <<@evaluate[<aApplicability(appl)> <code>]>>
aVisibility(id) ::= << >>



colaPropertyDefList(property) ::=<<
$if(property)$  [$property; separator=",\n   "$]$endif$
>>
colaPropertyDef(type, id, val) ::= <<
$type$ $id$$if(val)$($val; separator=", "$)$endif$
>>



colaItemDecl(id, property, misc) ::= <<
item $id${$property; separator=", "$}$if(!misc.inContract)$


$endif$
>>

colaItemDeclProperty(scoped_name, id, description) ::= <<
$scoped_name$ $id$ @description($description.token$)>>

colaItemDeclContract(scoped_name) ::= <<
item $scoped_name$
>>


colaContractDecl(id, contractScope, description, items) ::= <<
contract $id$:
  @scope([element, $contractScope.element$], [facility, $contractScope.facility$]),
  @description($description.token$),
  $items; separator=",\n"$
  ;

>>


colaContractDefList(contract) ::= <<
$if(contract)$  [[$contract; separator=",\n    "$]]$endif$
>>
colaContractDef(scoped_name, id, items) ::= <<
{$scoped_name$ $id$ = $items; separator=", "$}
>>

colaContractItemDef(id, properties) ::= <<
$id$[$properties; separator=", "$]
>>
colaItemDef(id, val) ::= <<
$id$$if(val)$($val; separator=", "$)$endif$
>>






colaPackage(id, body, inline_code, properties, misc) ::= <<
$if(properties)$$properties$$endif$
package $id$ {
  $if(inline_code)$$inline_code$$endif$
  $body; separator="\n"$
} // package $id$


>>


colaElement(id, body, aExtends, aProvides, aRequires, inline_code, properties, contracts, misc) ::= <<
$if(properties)$$properties$$endif$
$if(contracts)$$contracts$$endif$
element $id$
  $if(aExtends)$  extends $aExtends$$endif$
  $if(aProvides)$  provides $aProvides; separator=", "$$endif$
  $if(aRequires)$  requires $aRequires; separator=", "$$endif$
{
  $if(inline_code)$$inline_code$$endif$

  $body; separator="\n"$
} // element $id$


>>


colaFacility(id, body, aExtends, aRequires, properties, contracts, misc) ::= <<
$if(properties)$$properties$$endif$
$if(contracts)$$contracts$$endif$
facility $id$
  $if(aExtends)$  extends $aExtends; separator=", "$$endif$
  $if(aRequires)$  requires $aRequires; separator=", "$$endif$
{
  $body; separator="\n"$
} // facility $id$


>>


colaAction(id, type, parameter, inline_code, properties, misc) ::= <<
$if(properties)$$properties$$endif$
action $if(type.scoped_name)$$type.scoped_name$$else$$if(type.base_type)$$type.base_type$$else$$type.void$$endif$$endif$$if(type.array)$[]$endif$ $id$($parameter; separator=", "$)$if (inline_code)${
  $inline_code$
}$endif$;


>>

colaParameter(id, type, properties, misc) ::= <<
$if(properties)$$properties$$endif$ $if(type.scoped_name)$$type.scoped_name$$else$$type.base_type$$endif$$if(type.array)$[]$endif$ $id$
>>


colaTypeDef(id, type, inline_code, properties, misc) ::= <<
$if(properties)$$properties$$endif$
typedef $if(type.scoped_name)$$type.scoped_name$$else$$type.base_type$$endif$$if(type.array)$[]$endif$ $id$$if(inline_code)$ {$inline_code$}$endif$;


>>


colaAttribute(id, type, inline_code, properties, misc) ::= <<
$if(properties)$$properties$$endif$
attribute $if(type.scoped_name)$$type.scoped_name$$else$$type.base_type$$endif$$if(type.array)$[]$endif$ $id$$if (inline_code)${$inline_code$}$endif$;


>>


colaStruct(id, member, inline_code, properties, misc) ::= <<
$if(properties)$$properties$$endif$
struct $id$ {
  $if(inline_code)$($inline_code$)$endif$
  $member; separator="\n\n"$
} // struct $id$


>>

colaMember(id, type, properties, misc) ::= <<
$if(properties)$$properties$$endif$
$if(type.scoped_name)$$type.scoped_name$$else$$type.base_type$$endif$$if(type.array)$[]$endif$ $id$;
>>

const_value(type, val) ::= "$val$"
scoped_name(id) ::= <<$id; separator="::"$
>>


inline_code(language, code) ::= "{@language=<language> \<\<?<code>?\>\>}"inline_code(code, id, atom) ::= <<
