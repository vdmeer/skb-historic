//
// [The BSD License, http://www.opensource.org/licenses/bsd-license.php]
// Copyright (c) 2010-2011, Sven van der Meer <sven@vandermeer.de>
// All rights reserved.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
// 
//     + Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimer.
//     + Redistributions  in binary  form must  reproduce the  above copyright
//       notice, this list  of conditions and  the following disclaimer  in the
//       documentation and/or other materials provided with the distribution.
//     + Neither the name of the the author nor the names of its contributors
//       may be used to endorse or promote products derived from this software
//       without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS"
// AND ANY EXPRESS  OR IMPLIED WARRANTIES,  INCLUDING, BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY  AND FITNESS FOR A  PARTICULAR PURPOSE
// ARE DISCLAIMED. IN  NO EVENT SHALL  THE COPYRIGHT HOLDER  OR CONTRIBUTORS BE
// LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,   OR
// CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT  LIMITED  TO,  PROCUREMENT  OF
// SUBSTITUTE GOODS  OR SERVICES;  LOSS OF  USE, DATA,  OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER  CAUSED AND  ON ANY  THEORY OF  LIABILITY, WHETHER  IN
// CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED  OF THE
// POSSIBILITY OF SUCH DAMAGE.
//

//
// Configuration file for the Org.SKB.Lang.Cola.Proto
//
// @package    org.skb.lang.cola.proto
// @author     Sven van der Meer <sven@vandermeer.de>
// @copyright  2011-2011 Sven van der Meer
// @license    http://www.opensource.org/licenses/bsd-license.php  BSD License
// @version    v0.30 build 110309 (09-Mar-11)
//

{
    "skb":{
        "tribe":{
            "configuration":{
                "skb.application.name":{
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"COLA"
                },
                "skb.application.copyright":{
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"Copyright (c) 2002-2011 Sven van der Meer <sven@vandermeer.de>"
                },
                "skb.application.version":{
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"1.0.0"
                },
                "skb.application.build":{
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"110309"
                },
                "skb.application.builddate":{
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"2011-Mar-09"
                },
                "skb.application.generic-stg":{
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"\/org\/skb\/lang\/cola\/proto\/stg\/codegen\/internal\/generic.stg"
                }
            }
        },
        "lang":{
            "configuration":{
                "cola":{
                    "skb:util:constant:ident":"internalColaTgtCola",
                    "skb:util:constant:javadoc":"Constant to test internally for the target Cola"
                },
                "java":{
                    "skb:util:constant:ident":"internalColaTgtJava",
                    "skb:util:constant:javadoc":"Constant to test internally for the target Java"
                },
                "php":{
                    "skb:util:constant:ident":"internalColaTgtPhp",
                    "skb:util:constant:javadoc":"Constant to test internally for the target PHP"
                },
                "xml":{
                    "skb:util:constant:ident":"internalColaTgtXml",
                    "skb:util:constant:javadoc":"Constant to test internally for the target XML"
                },
                "sql":{
                    "skb:util:constant:ident":"internalColaTgtSql",
                    "skb:util:constant:javadoc":"Constant to test internally for the target SQL"
                },
                "internal-scope-sep":{
                    "skb:util:constant:ident":"keyScopeSep",
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"::",
                    "skb:util:constant:javadoc":"Internal scope separator"
                },
                "pr-stats":{
                    "skb:util:constant:ident":"keyPrStat",
                    "skb:value:type":"ts:atomic:java:boolean",
                    "skb:value:default":false,
                    "skb:util:cli:option:long":"pr-stats",
                    "skb:util:cli:option:type":"ts:atomic:java:boolean",
                    "skb:util:cli:descr:short":"Show simple statistic information",
                    "skb:util:constant:javadoc":"Show simple statistic information"
                },
                "pr-stats-all":{
                    "skb:util:constant:ident":"keyPrStatAll",
                    "skb:value:type":"ts:atomic:java:boolean",
                    "skb:value:default":false,
                    "skb:util:cli:option:long":"pr-stats-all",
                    "skb:util:cli:option:type":"ts:atomic:java:boolean",
                    "skb:util:cli:descr:short":"Show complete statistic information",
                    "skb:util:constant:javadoc":"Show complete statistic information"
                },
                "pr-stats-ws":{
                    "skb:util:constant:ident":"keyPrStatsWScope",
                    "skb:value:type":"ts:atomic:java:boolean",
                    "skb:value:default":false,
                    "skb:util:cli:option:long":"pr-stats-ws",
                    "skb:util:cli:option:type":"ts:atomic:java:boolean",
                    "skb:util:cli:descr:short":"No scoped names in statistics",
                    "skb:util:constant:javadoc":"Don't use scoped names in statistics"
                },
                "pr-stg-stats":{
                    "skb:util:constant:ident":"keyPrStgFileStats",
                    "skb:value:type":"ts:atomic:java:boolean",
                    "skb:value:default":false,
                    "skb:util:cli:option:long":"pr-stg-stats",
                    "skb:util:cli:option:type":"ts:atomic:java:boolean",
                    "skb:util:cli:descr:short":"Print statistics string template",
                    "skb:util:constant:javadoc":"Print the string template used for statistics"
                },
                "stat-stg":{
                    "skb:util:constant:ident":"keyStatStg",
                    "skb:value:type":"ts:atomic:java:string",
                    "skb:value:default":"\/org\/skb\/lang\/cola\/proto\/stg\/statistics.stg",
                    "skb:util:cli:option:long":"stat-stg",
                    "skb:util:cli:descr:arguments":"file",
                    "skb:util:cli:option:type":"ts:atomic:java:string",
                    "skb:util:cli:descr:short":"Group template file for statistics",
                    "skb:util:constant:javadoc":"Group template for statistics"
                }
            },
            "targets":{
                "cola":{
                    "skb.clioption.tgt-stg":{
                            "skb:value:default":"\/org\/skb\/lang\/cola\/proto\/stg\/codegen\/targets\/cola.stg"
                    },
                    "skb.clioption.tgt-fileext":{
                            "skb:value:default":".cola"
                    },
                    "skb.clioption.gc-scope-sep":{
                            "skb:value:default":"::"
                    },
                    "skb:lang:target:config:cli":{
                        "xt-do-includes":{
                            "skb:util:constant:ident":"keyXtDoIncludes",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"xt-do-includes",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Generate includes",
                            "skb:util:constant:javadoc":"Generate includes"
                        },
                        "tgt-split-code":{
                            "skb:util:constant:ident":"keyTgSplitCode",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"tgt-split-code",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Split code (i.e. packages in directories, elements and facilities in files)",
                            "skb:util:constant:javadoc":"Split code (i.e. packages in directories, elements and facilities in files)"
                        },
                        "tgt-sc-by-pkg":{
                            "skb:util:constant:ident":"keyTgSCbyPackage",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"tgt-sc-by-pkg",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Split code by package",
                            "skb:util:constant:javadoc":"Split code by package"
                        },
                        "tgt-sc-by-category":{
                            "skb:util:constant:ident":"keyTgSCbyAtomCategory",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"tgt-sc-by-category",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Split code by atom category (i.e. element, struct)",
                            "skb:util:constant:javadoc":"Split code by atom category (i.e. element, struct)"
                        }
                    }
                },
                "java":{
                    "skb.clioption.tgt-stg":{
                            "skb:value:default":"\/org\/skb\/lang\/cola\/proto\/stg\/codegen\/targets\/java.stg"
                    },
                    "skb.clioption.tgt-fileext":{
                            "skb:value:default":".java"
                    },
                    "skb.clioption.gc-scope-sep":{
                            "skb:value:default":"."
                    },
                    "skb:lang:target:config:cli":{
                        "xt-do-imports":{
                            "skb:util:constant:ident":"keyXtDoImports",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"xt-do-imports",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Generate imports (Java style)",
                            "skb:util:constant:javadoc":"Generate imports (Java Style)"
                        },
                        "xt-do-element-code":{
                            "skb:util:constant:ident":"keyXtDoElementCode",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"xt-do-element-code",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Generate complete Element skeletons",
                            "skb:util:constant:javadoc":"Generate complete Element skeletons"
                        },
                        "xt-java-pkg":{
                            "skb:util:constant:ident":"keyXtJavaPackage",
                            "skb:value:type":"ts:atomic:java:string",
                            "skb:value:default":"",
                            "skb:util:cli:option:long":"xt-java-pkg",
                            "skb:util:cli:descr:arguments":"package",
                            "skb:util:cli:option:type":"ts:atomic:java:string",
                            "skb:util:cli:descr:short":"Root package for java classes",
                            "skb:util:constant:javadoc":"Root package name for java classes"
                        },
                        "tgt-split-code":{
                            "skb:util:constant:ident":"keyTgSplitCode",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":true,
                            "skb:util:cli:option:long":"tgt-split-code",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Split code (i.e. packages in directories, elements and facilities in files)",
                            "skb:util:constant:javadoc":"Split code (i.e. packages in directories, elements and facilities in files)"
                        },
                        "tgt-sc-by-pkg":{
                            "skb:util:constant:ident":"keyTgSCbyPackage",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"tgt-sc-by-pkg",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Split code by package",
                            "skb:util:constant:javadoc":"Split code by package"
                        },
                        "tgt-sc-by-category":{
                            "skb:util:constant:ident":"keyTgSCbyAtomCategory",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"tgt-sc-by-category",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Split code by atom category (i.e. element, struct)",
                            "skb:util:constant:javadoc":"Split code by atom category (i.e. element, struct)"
                        }
                    }
                },
                "php":{
                    "skb.clioption.tgt-stg":{
                            "skb:value:default":"\/org\/skb\/lang\/cola\/proto\/stg\/codegen\/targets\/php.stg"
                    },
                    "skb.clioption.tgt-fileext":{
                            "skb:value:default":".php5"
                    },
                    "skb.clioption.gc-scope-sep":{
                            "skb:value:default":"::"
                    },
                    "skb:lang:target:config:cli":{
                        "xt-do-includes":{
                            "skb:util:constant:ident":"keyXtDoIncludes",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"xt-do-includes",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Generate includes",
                            "skb:util:constant:javadoc":"Generate includes"
                        },
                        "xt-do-element-code":{
                            "skb:util:constant:ident":"keyXtDoElementCode",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"xt-do-element-code",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Generate complete Element skeletons",
                            "skb:util:constant:javadoc":"Generate complete Element skeletons"
                        },
                        "tgt-split-code":{
                            "skb:util:constant:ident":"keyTgSplitCode",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"tgt-split-code",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Split code (i.e. packages in directories, elements and facilities in files)",
                            "skb:util:constant:javadoc":"Split code (i.e. packages in directories, elements and facilities in files)"
                        },
                        "tgt-sc-by-pkg":{
                            "skb:util:constant:ident":"keyTgSCbyPackage",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"tgt-sc-by-pkg",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Split code by package",
                            "skb:util:constant:javadoc":"Split code by package"
                        },
                        "tgt-sc-by-category":{
                            "skb:util:constant:ident":"keyTgSCbyAtomCategory",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"tgt-sc-by-category",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Split code by atom category (i.e. element, struct)",
                            "skb:util:constant:javadoc":"Split code by atom category (i.e. element, struct)"
                        }
                    }
                },
                "xml":{
                    "skb.clioption.tgt-stg":{
                            "skb:value:default":"\/org\/skb\/lang\/cola\/proto\/stg\/codegen\/targets\/xml.stg"
                    },
                    "skb.clioption.tgt-fileext":{
                            "skb:value:default":".xml"
                    },
                    "skb.clioption.gc-scope-sep":{
                            "skb:value:default":"::"
                    },
                    "skb.application.tgt-stg-angle-br":{
                        "skb:value:default":false
                    },
                    "skb:lang:target:config:cli":{
                        "xt-do-includes":{
                            "skb:util:constant:ident":"keyXtDoIncludes",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"xt-do-includes",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Generate includes",
                            "skb:util:constant:javadoc":"Generate includes"
                        },
                        "tgt-split-code":{
                            "skb:util:constant:ident":"keyTgSplitCode",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:constant:javadoc":"Split code (i.e. packages in directories, elements and facilities in files)"
                        }
                    }
                },
                "sql":{
                    "skb.clioption.tgt-stg":{
                            "skb:value:default":"\/org\/skb\/lang\/cola\/proto\/stg\/codegen\/targets\/sql.stg"
                    },
                    "skb.clioption.tgt-fileext":{
                            "skb:value:default":".sql"
                    },
                    "skb.clioption.gc-scope-sep":{
                            "skb:value:default":"::"
                    },
                    "skb:lang:target:config:cli":{
                        "xt-do-includes":{
                            "skb:util:constant:ident":"keyXtDoIncludes",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:cli:option:long":"xt-do-includes",
                            "skb:util:cli:option:type":"ts:atomic:java:boolean",
                            "skb:util:cli:descr:short":"Generate includes",
                            "skb:util:constant:javadoc":"Generate includes"
                        },
                        "tgt-split-code":{
                            "skb:util:constant:ident":"keyTgSplitCode",
                            "skb:value:type":"ts:atomic:java:boolean",
                            "skb:value:default":false,
                            "skb:util:constant:javadoc":"Split code (i.e. packages in directories, elements and facilities in files)"
                        }
                    }
                }
            },

            "stgchunks":{
                "mlcomment_start":{
                    "skb:stringtemplate:chunks:mandatory": ["dummy"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "mlcomment_end":{
                    "skb:stringtemplate:chunks:mandatory": ["dummy"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "slcomment":{
                    "skb:stringtemplate:chunks:mandatory": ["comment"],
                    "skb:stringtemplate:chunks:optional":  []
                },
        
                "colaSpecification":{
                    "skb:stringtemplate:chunks:mandatory": ["stage", "environment", "clevel", "language", "spec"],
                    "skb:stringtemplate:chunks:optional":  []
                },
        
                "colaFunction":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "parameter", "ret_type", "ret_array"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "colaFunctionParam":{
                    "skb:stringtemplate:chunks:mandatory": ["type", "array", "id"],
                    "skb:stringtemplate:chunks:optional":  []
                },
        
                "colaPropertyDecl":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "type", "val", "array", "propertyScope", "apply", "aExtends", "aRequires",
                                  "alterable", "negotiable", "priorityBT", "priorityCV", "description", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "aVisibility":{
                    "skb:stringtemplate:chunks:mandatory": ["id"],
                    "skb:stringtemplate:chunks:optional":  []
                },
        
                "colaPropertyDefList":{
                    "skb:stringtemplate:chunks:mandatory": ["property"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "colaPropertyDef":{
                    "skb:stringtemplate:chunks:mandatory": ["sn", "id", "type", "val", "array", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
        
                "colaContractDecl":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "contractScope", "description", "items" , "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "contractItem":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "property", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "contractItemProp":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "type", "val", "array", "rank", "apply", "alterable", "negotiable", "description", "priorityBT", "priorityCV", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
        
                "colaContractDefList":{
                    "skb:stringtemplate:chunks:mandatory": ["contract", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "colaContractDef":{
                    "skb:stringtemplate:chunks:mandatory":  ["scoped_name", "id", "items", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "colaContractItemDef":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "properties", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "colaItemDef":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "val", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
        
                "colaPackage":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "body", "inline_code", "properties", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "colaElement":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "body", "aExtends", "aProvides", "aRequires", "inline_code", "properties", "contracts", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "colaFacility":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "body", "aExtends", "aRequires", "properties", "contracts", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "colaAction":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "type", "parameter", "inline_code", "properties", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "colaParameter":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "type", "properties", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "colaTypeDef":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "type", "inline_code", "properties", "propertiesInstances", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "colaAttribute":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "type", "inline_code", "properties", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "colaStruct":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "member", "inline_code", "properties", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "colaMember":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "type", "properties", "misc"],
                    "skb:stringtemplate:chunks:optional":  []
                },
        
                "const_value":{
                    "skb:stringtemplate:chunks:mandatory": ["type", "val"],
                    "skb:stringtemplate:chunks:optional":  []
                },
                "scoped_name":{
                    "skb:stringtemplate:chunks:mandatory": ["id", "add"],
                    "skb:stringtemplate:chunks:optional":  []
                },

                "inline_code":{
                    "skb:stringtemplate:chunks:mandatory": ["language", "code"],
                    "skb:stringtemplate:chunks:optional":  []
                }
            },

            "tokens":{
                // for parser
                "parserARRAY":{
                    "skb:util:constant:ident":"parserARRAY",
                    "skb:util:constant:value":"array",
                    "skb:util:constant:javadoc":"Parser - array"
                },
                "parserMEMBER":{
                    "skb:util:constant:ident":"parserMEMBER",
                    "skb:util:constant:value":"member",
                    "skb:util:constant:javadoc":"Parser - member"
                },
                "parserIDENTIFIER":{
                    "skb:util:constant:ident":"parserIDENTIFIER",
                    "skb:util:constant:value":"identifier",
                    "skb:util:constant:javadoc":"Parser - identifier"
                },
                "parserScopedName":{
                    "skb:util:constant:ident":"parserScopedName",
                    "skb:util:constant:value":"scoped_name",
                    "skb:util:constant:javadoc":"Parser - scoped name"
                },
                "parserBaseType ":{
                    "skb:util:constant:ident":"parserBaseType ",
                    "skb:util:constant:value":"base_type",
                    "skb:util:constant:javadoc":"Parser - base type"
                },
                "parserItemProp":{
                    "skb:util:constant:ident":"parserItemProp",
                    "skb:util:constant:value":"item-property",
                    "skb:util:constant:javadoc":"Parser - item-property"
                },
                "parserScopeSep":{
                    "skb:util:constant:ident":"parserScopeSep",
                    "skb:util:constant:value":"::",
                    "skb:util:constant:javadoc":"Parser - scope separator"
                },
                "gcMiscParrentID":{
                    "skb:util:constant:ident":"gcMiscParrentID",
                    "skb:util:constant:value":"parrentId",
                    "skb:util:constant:javadoc":"Generate Code - parrent ID"
                },
                "gcMiscParrentCat":{
                    "skb:util:constant:ident":"gcMiscParrentCat",
                    "skb:util:constant:value":"parrentCategory",
                    "skb:util:constant:javadoc":"Generate Code - parrent category"
                },
                "gcMiscCurrentCat":{
                    "skb:util:constant:ident":"gcMiscCurrentCat",
                    "skb:util:constant:value":"currentCategory",
                    "skb:util:constant:javadoc":"Generate Code - current category"
                },
                "gcMiscInDefinition":{
                    "skb:util:constant:ident":"gcMiscInDefinition",
                    "skb:util:constant:value":"inDefinition",
                    "skb:util:constant:javadoc":"Generate Code - in definition"
                },
                "gcMiscInItem":{
                    "skb:util:constant:ident":"gcMiscInItem",
                    "skb:util:constant:value":"inItem",
                    "skb:util:constant:javadoc":"Generate Code - in item"
                },
                "gcMiscInContract":{
                    "skb:util:constant:ident":"gcMiscInContract",
                    "skb:util:constant:value":"inContract",
                    "skb:util:constant:javadoc":"Generate Code - in contract"
                },
                "gcMiscInPackage":{
                    "skb:util:constant:ident":"gcMiscInPackage",
                    "skb:util:constant:value":"inPackage",
                    "skb:util:constant:javadoc":"Generate Code - in package"
                },
                "gcMiscInElement":{
                    "skb:util:constant:ident":"gcMiscInElement",
                    "skb:util:constant:value":"inElement",
                    "skb:util:constant:javadoc":"Generate Code - in element"
                },
                "gcMiscInFacility":{
                    "skb:util:constant:ident":"gcMiscInFacility",
                    "skb:util:constant:value":"inFacility",
                    "skb:util:constant:javadoc":"Generate Code - in facility"
                },
                "gcMiscInAction":{
                    "skb:util:constant:ident":"gcMiscInAction",
                    "skb:util:constant:value":"inAction",
                    "skb:util:constant:javadoc":"Generate Code - in action"
                },
                "gcMiscInStruct":{
                    "skb:util:constant:ident":"gcMiscInStruct",
                    "skb:util:constant:value":"inStruct",
                    "skb:util:constant:javadoc":"Generate Code - in structure"
                },
                "gcMiscSpecName":{
                    "skb:util:constant:ident":"gcMiscSpecName",
                    "skb:util:constant:value":"specificationName",
                    "skb:util:constant:javadoc":"Generate Code - specification name"
                },
                "gcMiscCurrentScope":{
                    "skb:util:constant:ident":"gcMiscCurrentScope",
                    "skb:util:constant:value":"currentScope",
                    "skb:util:constant:javadoc":"Generate Code - current scope"
                },


                // COLA Keywords
                "colaACTION":{
                    "skb:util:constant:ident":"colaACTION",
                    "skb:util:constant:value":"action",
                    "skb:lang:target:token:ident":"ACTION",
                    "skb:lang:target:token:translate":"keyword 'action'",
                    "skb:util:constant:javadoc":"Action Keyword"
                },
                "colaATTRIBUTE":{
                    "skb:util:constant:ident":"colaATTRIBUTE",
                    "skb:util:constant:value":"attribute",
                    "skb:lang:target:token:ident":"ATTRIBUTE",
                    "skb:lang:target:token:translate":"keyword 'attribute'",
                    "skb:util:constant:javadoc":"Attribute Keyword"
                },
                "colaCONTRACT":{
                    "skb:util:constant:ident":"colaCONTRACT",
                    "skb:util:constant:value":"contract",
                    "skb:lang:target:token:ident":"CONTRACT",
                    "skb:lang:target:token:translate":"keyword 'contract'",
                    "skb:util:constant:javadoc":"Contract Keyword"
                },
                "colaDEFINITION":{
                    "skb:util:constant:ident":"colaDEFINITION",
                    "skb:util:constant:value":"definition",
                    "skb:lang:target:token:ident":"DEFINITION",
                    "skb:lang:target:token:translate":"keyword 'definition'",
                    "skb:util:constant:javadoc":"Definition Keyword"
                },
                "colaELEMENT":{
                    "skb:util:constant:ident":"colaELEMENT",
                    "skb:util:constant:value":"element",
                    "skb:lang:target:token:ident":"ELEMENT",
                    "skb:lang:target:token:translate":"keyword 'element'",
                    "skb:util:constant:javadoc":"Element Keyword"
                },
                "colaFACILITY":{
                    "skb:util:constant:ident":"colaFACILITY",
                    "skb:util:constant:value":"facility",
                    "skb:lang:target:token:ident":"FACILITY",
                    "skb:lang:target:token:translate":"keyword 'facility'",
                    "skb:util:constant:javadoc":"Facility Keyword"
                },
                "colaFUNCTION":{
                    "skb:util:constant:ident":"colaFUNCTION",
                    "skb:util:constant:value":"function",
                    "skb:lang:target:token:ident":"FUNCTON",
                    "skb:lang:target:token:translate":"keyword 'function'",
                    "skb:util:constant:javadoc":"Function Keyword"
                },
                "colaINV":{
                    "skb:util:constant:ident":"colaINV",
                    "skb:util:constant:value":"inv",
                    "skb:lang:target:token:ident":"INVARIANT",
                    "skb:lang:target:token:translate":"keyword 'inv'",
                    "skb:util:constant:javadoc":"Inv Keyword"
                },
                "colaITEM":{
                    "skb:util:constant:ident":"colaITEM",
                    "skb:util:constant:value":"item",
                    "skb:lang:target:token:ident":"ITEM",
                    "skb:lang:target:token:translate":"keyword 'item'",
                    "skb:util:constant:javadoc":"Item Keyword"
                },
                "colaMANDATORY":{
                    "skb:util:constant:ident":"colaMANDATORY",
                    "skb:util:constant:value":"mandatory",
                    "skb:lang:target:token:ident":"MANDATORY",
                    "skb:lang:target:token:translate":"keyword 'mandatory'",
                    "skb:util:constant:javadoc":"Mandatory Keyword"
                },
                "colaNOT_DEF":{
                    "skb:util:constant:ident":"colaNOT_DEF",
                    "skb:util:constant:value":"not_def",
                    "skb:lang:target:token:ident":"NOT_DEF",
                    "skb:lang:target:token:translate":"keyword 'not_def'",
                    "skb:util:constant:javadoc":"Not_def Keyword"
                },
                "colaOPTIONAL":{
                    "skb:util:constant:ident":"colaOPTIONAL",
                    "skb:util:constant:value":"optional",
                    "skb:lang:target:token:ident":"OPTIONAL",
                    "skb:lang:target:token:translate":"keyword 'optional'",
                    "skb:util:constant:javadoc":"Optional Keyword"
                },
                "colaPACKAGE":{
                    "skb:util:constant:ident":"colaPACKAGE",
                    "skb:util:constant:value":"package",
                    "skb:lang:target:token:ident":"PACKAGE",
                    "skb:lang:target:token:translate":"keyword 'package'",
                    "skb:util:constant:javadoc":"Package Keyword"
                },
                "colaPARAMETER":{
                    "skb:util:constant:ident":"colaPARAMETER",
                    "skb:util:constant:value":"parameter",
                    "skb:lang:target:token:ident":"PARAMETER",
                    "skb:lang:target:token:translate":"keyword 'parameter'",
                    "skb:util:constant:javadoc":"Parameter Keyword"
                },
                "colaPOST":{
                    "skb:util:constant:ident":"colaPOST",
                    "skb:util:constant:value":"post",
                    "skb:lang:target:token:ident":"POST",
                    "skb:lang:target:token:translate":"keyword 'post'",
                    "skb:util:constant:javadoc":"Post Keyword"
                },
                "colaPRE":{
                    "skb:util:constant:ident":"colaPRE",
                    "skb:util:constant:value":"pre",
                    "skb:lang:target:token:ident":"PRE",
                    "skb:lang:target:token:translate":"keyword 'pre'",
                    "skb:util:constant:javadoc":"Pre Keyword"
                },
                "colaPROPERTY":{
                    "skb:util:constant:ident":"colaPROPERTY",
                    "skb:util:constant:value":"property",
                    "skb:lang:target:token:ident":"PROPERTY",
                    "skb:lang:target:token:translate":"keyword 'property'",
                    "skb:util:constant:javadoc":"Property Keyword"
                },
                "colaREQUIRED":{
                    "skb:util:constant:ident":"colaREQUIRED",
                    "skb:util:constant:value":"required",
                    "skb:lang:target:token:ident":"REQUIRED",
                    "skb:lang:target:token:translate":"keyword 'required'",
                    "skb:util:constant:javadoc":"Required Keyword"
                },
                "colaSPECIFICATION":{
                    "skb:util:constant:ident":"colaSPECIFICATION",
                    "skb:util:constant:value":"cola-specification",
                    "skb:lang:target:token:ident":"SPECIFICATION",
                    "skb:lang:target:token:translate":"keyword 'cola-specification'",
                    "skb:util:constant:javadoc":"Specification Keyword"
                },
                "colaSTRUCT":{
                    "skb:util:constant:ident":"colaSTRUCT",
                    "skb:util:constant:value":"struct",
                    "skb:lang:target:token:ident":"STRUCT",
                    "skb:lang:target:token:translate":"keyword 'struct'",
                    "skb:util:constant:javadoc":"Struct Keyword"
                },
                "colaTYPEDEF":{
                    "skb:util:constant:ident":"colaTYPEDEF",
                    "skb:util:constant:value":"typedef",
                    "skb:lang:target:token:ident":"TYPEDEF",
                    "skb:lang:target:token:translate":"keyword 'typedef'",
                    "skb:util:constant:javadoc":"Tyepdef Keyword"
                },


                // COLA Keywords -> TYPES
                "colaBINARY":{
                    "skb:util:constant:ident":"colaBINARY",
                    "skb:util:constant:value":"binary",
                    "skb:lang:target:token:ident":"BINARY",
                    "skb:lang:target:token:translate":"keyword 'binary'",
                    "skb:util:constant:javadoc":"Binary Keyword"
                },
                "colaBOOLEAN":{
                    "skb:util:constant:ident":"colaBOOLEAN",
                    "skb:util:constant:value":"boolean",
                    "skb:lang:target:token:ident":"BOOLEAN",
                    "skb:lang:target:token:translate":"keyword 'boolean'",
                    "skb:util:constant:javadoc":"Boolean Keyword"
                },
                "colaCHAR":{
                    "skb:util:constant:ident":"colaCHAR",
                    "skb:util:constant:value":"char",
                    "skb:lang:target:token:ident":"CHAR",
                    "skb:lang:target:token:translate":"keyword 'char'",
                    "skb:util:constant:javadoc":"Char Keyword"
                },
                "colaDOUBLE":{
                    "skb:util:constant:ident":"colaDOUBLE",
                    "skb:util:constant:value":"double",
                    "skb:lang:target:token:ident":"DOUBLE",
                    "skb:lang:target:token:translate":"keyword 'double'",
                    "skb:util:constant:javadoc":"Double Keyword"
                },
                "colaFLOAT":{
                    "skb:util:constant:ident":"colaFLOAT",
                    "skb:util:constant:value":"float",
                    "skb:lang:target:token:ident":"FLOAT",
                    "skb:lang:target:token:translate":"keyword 'float'",
                    "skb:util:constant:javadoc":"Float Keyword"
                },
                "colaHEX":{
                    "skb:util:constant:ident":"colaHEX",
                    "skb:util:constant:value":"hex",
                    "skb:lang:target:token:ident":"HEX",
                    "skb:lang:target:token:translate":"keyword 'hex'",
                    "skb:util:constant:javadoc":"Hex Keyword"
                },
                "colaINTEGER":{
                    "skb:util:constant:ident":"colaINTEGER",
                    "skb:util:constant:value":"integer",
                    "skb:lang:target:token:ident":"INTEGER",
                    "skb:lang:target:token:translate":"keyword 'integer'",
                    "skb:util:constant:javadoc":"Integer Keyword"
                },
                "colaLONG":{
                    "skb:util:constant:ident":"colaLONG",
                    "skb:util:constant:value":"long",
                    "skb:lang:target:token:ident":"LONG",
                    "skb:lang:target:token:translate":"keyword 'long'",
                    "skb:util:constant:javadoc":"Long Keyword"
                },
                "colaOCTET":{
                    "skb:util:constant:ident":"colaOCTET",
                    "skb:util:constant:value":"octet",
                    "skb:lang:target:token:ident":"OCTET",
                    "skb:lang:target:token:translate":"keyword 'octet'",
                    "skb:util:constant:javadoc":"Octet Keyword"
                },
                "colaSHORT":{
                    "skb:util:constant:ident":"colaSHORT",
                    "skb:util:constant:value":"short",
                    "skb:lang:target:token:ident":"SHORT",
                    "skb:lang:target:token:translate":"keyword 'short'",
                    "skb:util:constant:javadoc":"Short Keyword"
                },
                "colaSTRING":{
                    "skb:util:constant:ident":"colaSTRING",
                    "skb:util:constant:value":"string",
                    "skb:lang:target:token:ident":"STRING",
                    "skb:lang:target:token:translate":"keyword 'string'",
                    "skb:util:constant:javadoc":"String Keyword"
                },
                "colaVOID":{
                    "skb:util:constant:ident":"colaVOID",
                    "skb:util:constant:value":"void",
                    "skb:lang:target:token:ident":"VOID",
                    "skb:lang:target:token:translate":"keyword 'void'",
                    "skb:util:constant:javadoc":"Void Keyword"
                },


                // COLA Keywords -> VALUES
                "colaFALSE":{
                    "skb:util:constant:ident":"colaFALSE",
                    "skb:util:constant:value":"FALSE",
                    "skb:lang:target:token:ident":"FALSE",
                    "skb:lang:target:token:translate":"keyword 'FALSE'",
                    "skb:util:constant:javadoc":"FALSE Value"
                },
                "colaNULL":{
                    "skb:util:constant:ident":"colaNULL",
                    "skb:util:constant:value":"NULL",
                    "skb:lang:target:token:ident":"NULL",
                    "skb:lang:target:token:translate":"keyword 'NULL'",
                    "skb:util:constant:javadoc":"NULL Value"
                },
                "colaTRUE":{
                    "skb:util:constant:ident":"colaTRUE",
                    "skb:util:constant:value":"TRUE",
                    "skb:lang:target:token:ident":"TRUE",
                    "skb:lang:target:token:translate":"keyword 'TRUE'",
                    "skb:util:constant:javadoc":"TRUE Value"
                },


                // COLA Keywords -> @@@
                "colaAT_ALTERABLE":{
                    "skb:util:constant:ident":"colaAT_ALTERABLE",
                    "skb:util:constant:value":"@alterable",
                    "skb:lang:target:token:ident":"AT_ALTERABLE",
                    "skb:lang:target:token:translate":"an @ keyword '@alterable'",
                    "skb:util:constant:javadoc":"Constant for &#64;Alterable"
                },
                "colaAT_APPLY":{
                    "skb:util:constant:ident":"colaAT_APPLY",
                    "skb:util:constant:value":"@apply",
                    "skb:lang:target:token:ident":"AT_APPLY",
                    "skb:lang:target:token:translate":"an @ keyword '@apply'",
                    "skb:util:constant:javadoc":"Constant for &#64;Apply"
                },
                "colaAT_CLEVEL":{
                    "skb:util:constant:ident":"colaAT_CLEVEL",
                    "skb:util:constant:value":"@clevel",
                    "skb:lang:target:token:ident":"AT_CLEVEL",
                    "skb:lang:target:token:translate":"an @ keyword '@clevel'",
                    "skb:util:constant:javadoc":"Constant for &#64;CLevel"
                },
                "colaAT_CONTAINS":{
                    "skb:util:constant:ident":"colaAT_CONTAINS",
                    "skb:util:constant:value":"@contains",
                    "skb:lang:target:token:ident":"AT_CONTAINS",
                    "skb:lang:target:token:translate":"an @ keyword '@contains'",
                    "skb:util:constant:javadoc":"Constant for &#64;Contains"
                },
                "colaAT_DESCRIPTION":{
                    "skb:util:constant:ident":"colaAT_DESCRIPTION",
                    "skb:util:constant:value":"@description",
                    "skb:lang:target:token:ident":"AT_DESCRIPTION",
                    "skb:lang:target:token:translate":"an @ keyword '@description'",
                    "skb:util:constant:javadoc":"Constant for &#64;Description"
                },
                "colaAT_EXTENDS":{
                    "skb:util:constant:ident":"colaAT_EXTENDS",
                    "skb:util:constant:value":"@extends",
                    "skb:lang:target:token:ident":"AT_EXTENDS",
                    "skb:lang:target:token:translate":"an @ keyword '@extends'",
                    "skb:util:constant:javadoc":"Constant for &#64;Extends"
                },
                "colaAT_ENVIRONMENT":{
                    "skb:util:constant:ident":"colaAT_ENVIRONMENT",
                    "skb:util:constant:value":"@environment",
                    "skb:lang:target:token:ident":"AT_ENVIRONMENT",
                    "skb:lang:target:token:translate":"an @ keyword '@environment'",
                    "skb:util:constant:javadoc":"Constant for &#64;Environment"
                },
                "colaAT_LANGUAGE":{
                    "skb:util:constant:ident":"colaAT_LANGUAGE",
                    "skb:util:constant:value":"@language",
                    "skb:lang:target:token:ident":"AT_LANGUAGE",
                    "skb:lang:target:token:translate":"an @ keyword '@language'",
                    "skb:util:constant:javadoc":"Constant for &#64;Language"
                },
                "colaAT_NEGOTIABLE":{
                    "skb:util:constant:ident":"colaAT_NEGOTIABLE",
                    "skb:util:constant:value":"@negotiable",
                    "skb:lang:target:token:ident":"AT_NEGOTIABLE",
                    "skb:lang:target:token:translate":"an @ keyword '@negotiable'",
                    "skb:util:constant:javadoc":"Constant for &#64;Negotiable"
                },
                "colaAT_PRIORITY":{
                    "skb:util:constant:ident":"colaAT_PRIORITY",
                    "skb:util:constant:value":"@priority",
                    "skb:lang:target:token:ident":"AT_PRIORITY",
                    "skb:lang:target:token:translate":"an @ keyword '@priority'",
                    "skb:util:constant:javadoc":"Constant for &#64;Priority"
                },
                "colaAT_PROVIDES":{
                    "skb:util:constant:ident":"colaAT_PROVIDES",
                    "skb:util:constant:value":"@provides",
                    "skb:lang:target:token:ident":"AT_PROVIDES",
                    "skb:lang:target:token:translate":"an @ keyword '@provides'",
                    "skb:util:constant:javadoc":"Constant for &#64;Provides"
                },
                "colaAT_RANK":{
                    "skb:util:constant:ident":"colaAT_RANK",
                    "skb:util:constant:value":"@rank",
                    "skb:lang:target:token:ident":"AT_RANK",
                    "skb:lang:target:token:translate":"an @ keyword '@rank'",
                    "skb:util:constant:javadoc":"Constant for &#64;Rank"
                },
                "colaAT_REQUIRES":{
                    "skb:util:constant:ident":"colaAT_REQUIRES",
                    "skb:util:constant:value":"@requires",
                    "skb:lang:target:token:ident":"AT_REQUIRES",
                    "skb:lang:target:token:translate":"an @ keyword '@requires'",
                    "skb:util:constant:javadoc":"Constant for &#64;Requires"
                },
                "colaAT_RETURN":{
                    "skb:util:constant:ident":"colaAT_RETURN",
                    "skb:util:constant:value":"@return",
                    "skb:lang:target:token:ident":"AT_RETURN",
                    "skb:lang:target:token:translate":"an @ keyword '@return'",
                    "skb:util:constant:javadoc":"Constant for &#64;Return"
                },
                "colaAT_RUNTIME":{
                    "skb:util:constant:ident":"colaAT_RUNTIME",
                    "skb:util:constant:value":"@runtime",
                    "skb:lang:target:token:ident":"AT_RUNTIME",
                    "skb:lang:target:token:translate":"an @ keyword '@runtime'",
                    "skb:util:constant:javadoc":"Constant for &#64;Runtime"
                },
                "colaAT_SCOPE":{
                    "skb:util:constant:ident":"colaAT_SCOPE",
                    "skb:util:constant:value":"@scope",
                    "skb:lang:target:token:ident":"AT_SCOPE",
                    "skb:lang:target:token:translate":"an @ keyword '@scope'",
                    "skb:util:constant:javadoc":"Constant for &#64;Scope"
                },
                "colaAT_SPEC":{
                    "skb:util:constant:ident":"colaAT_SPEC",
                    "skb:util:constant:value":"@spec",
                    "skb:lang:target:token:ident":"AT_SPEC",
                    "skb:lang:target:token:translate":"an @ keyword '@spec'",
                    "skb:util:constant:javadoc":"Constant for &#64;Spec"
                },
                "colaAT_STAGE":{
                    "skb:util:constant:ident":"colaAT_STAGE",
                    "skb:util:constant:value":"@stage",
                    "skb:lang:target:token:ident":"AT_STAGE",
                    "skb:lang:target:token:translate":"an @ keyword '@stage'",
                    "skb:util:constant:javadoc":"Constant for &#64;Stage"
                },
                "colaAT_TYPE":{
                    "skb:util:constant:ident":"colaAT_TYPE",
                    "skb:util:constant:value":"@type",
                    "skb:lang:target:token:ident":"AT_TYPE",
                    "skb:lang:target:token:translate":"an @ keyword '@type'",
                    "skb:util:constant:javadoc":"Constant for &#64;Type"
                },
                "colaAT_VISIBILITY":{
                    "skb:util:constant:ident":"colaAT_VISIBILITY",
                    "skb:util:constant:value":"@visibility",
                    "skb:lang:target:token:ident":"AT_VISIBILITY",
                    "skb:lang:target:token:translate":"an @ keyword '@visibility'",
                    "skb:util:constant:javadoc":"Constant for &#64;Visibility"
                },


                //for lexer to print proper error messages
                "colaCPP_DIRECTIVE":{
                    "skb:util:constant:ident":"colaCPP_DIRECTIVE",
                    "skb:util:constant:value":"preprocessor directive",
                    "skb:lang:target:token:ident":"CPP_DIRECTIVE",
                    "skb:lang:target:token:translate":"preprocessor directive",
                    "skb:util:constant:javadoc":"CPP Directive"
                },
                "colaESC":{
                    "skb:util:constant:ident":"colaESC",
                    "skb:util:constant:value":"escape sequence",
                    "skb:lang:target:token:ident":"ESC",
                    "skb:lang:target:token:translate":"escape sequence",
                    "skb:util:constant:javadoc":"ESC"
                },
                "colaFloatSuffix":{
                    "skb:util:constant:ident":"colaFloatSuffix",
                    "skb:util:constant:value":"floating point suffix",
                    "skb:lang:target:token:ident":"FloatSuffix",
                    "skb:lang:target:token:translate":"floating point suffix",
                    "skb:util:constant:javadoc":"Float Suffix"
                },
                "colaHexDigit":{
                    "skb:util:constant:ident":"colaHexDigit",
                    "skb:util:constant:value":"hexadecimal digit",
                    "skb:lang:target:token:ident":"HexDigit",
                    "skb:lang:target:token:translate":"hexadecimal digit",
                    "skb:util:constant:javadoc":"Hex digit"
                },
                "colaIDENT":{
                    "skb:util:constant:ident":"colaIDENT",
                    "skb:util:constant:value":"identifier",
                    "skb:lang:target:token:ident":"IDENT",
                    "skb:lang:target:token:translate":"an identifier",
                    "skb:util:constant:javadoc":"Identifier"
                },
                "colaINLINE_CODE":{
                    "skb:util:constant:ident":"colaINLINE_CODE",
                    "skb:util:constant:value":"inline code",
                    "skb:lang:target:token:ident":"INLINE_CODE",
                    "skb:lang:target:token:translate":"inline code",
                    "skb:util:constant:javadoc":"Inline Code"
                },
                "colaML_COMMENT":{
                    "skb:util:constant:ident":"colaML_COMMENT",
                    "skb:util:constant:value":"multiple line comment",
                    "skb:lang:target:token:ident":"ML_COMMENT",
                    "skb:lang:target:token:translate":"multiple line comment",
                    "skb:util:constant:javadoc":"Multi Line Comment"
                },
                "colaOctDigit":{
                    "skb:util:constant:ident":"colaOctDigit",
                    "skb:util:constant:value":"otcal digit",
                    "skb:lang:target:token:ident":"OctDigit",
                    "skb:lang:target:token:translate":"otcal digit",
                    "skb:util:constant:javadoc":"Oct Digit"
                },
                "colaOctalEscape":{
                    "skb:util:constant:ident":"colaOctalEscape",
                    "skb:util:constant:value":"octal escape sequence",
                    "skb:lang:target:token:ident":"OctalEscape",
                    "skb:lang:target:token:translate":"octal escape sequence",
                    "skb:util:constant:javadoc":"Octal Escape"
                },
                "colaSL_COMMENT":{
                    "skb:util:constant:ident":"colaSL_COMMENT",
                    "skb:util:constant:value":"single line comment",
                    "skb:lang:target:token:ident":"SL_COMMENT",
                    "skb:lang:target:token:translate":"single line comment",
                    "skb:util:constant:javadoc":"Single Line Comment"
                },
                "colaUnicodeEscape":{
                    "skb:util:constant:ident":"colaUnicodeEscape",
                    "skb:util:constant:value":"unicode escape sequence",
                    "skb:lang:target:token:ident":"UnicodeEscape",
                    "skb:lang:target:token:translate":"unicode escape sequence",
                    "skb:util:constant:javadoc":"Unicode Escape"
                },
                "colaVAL_BINARY":{
                    "skb:util:constant:ident":"colaVAL_BINARY",
                    "skb:util:constant:value":"binary value",
                    "skb:lang:target:token:ident":"VAL_BINARY",
                    "skb:lang:target:token:translate":"binary value",
                    "skb:util:constant:javadoc":"Binary Value"
                },
                "colaVAL_CHAR":{
                    "skb:util:constant:ident":"colaVAL_CHAR",
                    "skb:util:constant:value":"character value",
                    "skb:lang:target:token:ident":"VAL_CHAR",
                    "skb:lang:target:token:translate":"character value",
                    "skb:util:constant:javadoc":"Char Value"
                },
                "colaVAL_FLOAT":{
                    "skb:util:constant:ident":"colaVAL_FLOAT",
                    "skb:util:constant:value":"floating point value",
                    "skb:lang:target:token:ident":"VAL_FLOAT",
                    "skb:lang:target:token:translate":"floating point value",
                    "skb:util:constant:javadoc":"Float Value"
                },
                "colaVAL_HEX":{
                    "skb:util:constant:ident":"colaVAL_HEX",
                    "skb:util:constant:value":"hexadecimal value",
                    "skb:lang:target:token:ident":"VAL_HEX",
                    "skb:lang:target:token:translate":"hexadecimal value",
                    "skb:util:constant:javadoc":"Hex Value"
                },
                "colaVAL_INTEGER":{
                    "skb:util:constant:ident":"colaVAL_INTEGER",
                    "skb:util:constant:value":"integer value",
                    "skb:lang:target:token:ident":"VAL_INTEGER",
                    "skb:lang:target:token:translate":"integer value",
                    "skb:util:constant:javadoc":"Integer Value"
                },
                "colaVAL_OCT":{
                    "skb:util:constant:ident":"colaVAL_OCT",
                    "skb:util:constant:value":"octal value",
                    "skb:lang:target:token:ident":"VAL_OCT",
                    "skb:lang:target:token:translate":"octal value",
                    "skb:util:constant:javadoc":"Octet Value"
                },
                "colaVAL_STRING":{
                    "skb:util:constant:ident":"colaVAL_STRING",
                    "skb:util:constant:value":"string value",
                    "skb:lang:target:token:ident":"VAL_STRING",
                    "skb:lang:target:token:translate":"string value",
                    "skb:util:constant:javadoc":"String Value"
                },
                "colaWS":{
                    "skb:util:constant:ident":"colaWS",
                    "skb:util:constant:value":"whitespace",
                    "skb:lang:target:token:ident":"WS",
                    "skb:lang:target:token:translate":"whitespace",
                    "skb:util:constant:javadoc":"White space"
                },


                //for lexer to print proper error messages
                ";":{
                    "skb:lang:target:token:ident":"';'",
                    "skb:lang:target:token:translate":"character ';'"
                },
                "}":{
                    "skb:lang:target:token:ident":"'}'",
                    "skb:lang:target:token:translate":"character '}'"
                },
                "=":{
                    "skb:lang:target:token:ident":"'='",
                    "skb:lang:target:token:translate":"character '='"
                },
                "(":{
                    "skb:lang:target:token:ident":"'('",
                    "skb:lang:target:token:translate":"character '('"
                },
                ":":{
                    "skb:lang:target:token:ident":"':'",
                    "skb:lang:target:token:translate":"character ':'"
                },
                "::":{
                    "skb:lang:target:token:ident":"'::'",
                    "skb:lang:target:token:translate":"scope operator '::'"
                },
                "[":{
                    "skb:lang:target:token:ident":"'['",
                    "skb:lang:target:token:translate":"character '['"
                },
                ",":{
                    "skb:lang:target:token:ident":"','",
                    "skb:lang:target:token:translate":"character ','"
                },
                ")":{
                    "skb:lang:target:token:ident":"')'",
                    "skb:lang:target:token:translate":"character ')'"
                },
                "{":{
                    "skb:lang:target:token:ident":"'{'",
                    "skb:lang:target:token:translate":"character '{'"
                },
                "]":{
                    "skb:lang:target:token:ident":"']'",
                    "skb:lang:target:token:translate":"character ']'"
                }
            },

            "rules":{
                "property:01":{
                    "skb:util:constant:ident":"ruleProperty01",
                    "skb:lang:parser:rules:message":"missing mandatory #### <%s> for %s <%s>",
                    "skb:lang:parser:rules:message:add":"all mandatory properties need to be declared",
                    "skb:lang:rule:message:replace":"colaPROPERTY",
                    "skb:util:constant:javadoc":"Rule for properties #01"
                },
                "property:02":{
                    "skb:util:constant:ident":"ruleProperty02",
                    "skb:lang:parser:rules:message":"missing required #### <%s> for %s <%s>",
                    "skb:lang:parser:rules:message:add":"all required properties need to be declared",
                    "skb:lang:rule:message:replace":"colaPROPERTY",
                    "skb:util:constant:javadoc":"Rule for properties #02"
                },
                "property:03":{
                    "skb:util:constant:ident":"ruleProperty03",
                    "skb:lang:parser:rules:message":"missing value for required #### <%s>, one empty value given",
                    "skb:lang:parser:rules:message:add":"required properties must be declared non-empty",
                    "skb:lang:rule:message:replace":"colaPROPERTY",
                    "skb:util:constant:javadoc":"Rule for properties #03"
                },
                "property:04":{
                    "skb:util:constant:ident":"ruleProperty04",
                    "skb:lang:parser:rules:message":"missing value for required #### <%s>, no value given",
                    "skb:lang:parser:rules:message:add":"required properties must be declared non-empty",
                    "skb:lang:rule:message:replace":"colaPROPERTY",
                    "skb:util:constant:javadoc":"Rule for properties #04"
                },
                "property:05":{
                    "skb:util:constant:ident":"ruleProperty05",
                    "skb:lang:parser:rules:message":"potential type mismatch for #### definition <%s>",
                    "skb:lang:parser:rules:message:add":"type expected is <%s[]>, but only %s value given",
                    "skb:lang:rule:message:replace":"colaPROPERTY",
                    "skb:util:constant:javadoc":"Rule for properties #05"
                },
                "property:06":{
                    "skb:util:constant:ident":"ruleProperty06",
                    "skb:lang:parser:rules:message":"type mismatch for #### definition <%s>",
                    "skb:lang:parser:rules:message:add":"type expected is <%s>, but %s values given",
                    "skb:lang:rule:message:replace":"colaPROPERTY",
                    "skb:util:constant:javadoc":"Rule for properties #06"
                },
                "property:07":{
                    "skb:util:constant:ident":"ruleProperty07",
                    "skb:lang:parser:rules:message":"type mismatch for #### definition <%s>",
                    "skb:lang:parser:rules:message:add":"expected <%s>, found <%s>",
                    "skb:lang:rule:message:replace":"colaPROPERTY",
                    "skb:util:constant:javadoc":"Rule for properties #07"
                },
                "property:08":{
                    "skb:util:constant:ident":"ruleProperty08",
                    "skb:lang:parser:rules:message":"potential type mismatch for #### definition <%s>",
                    "skb:lang:parser:rules:message:add":"expected <%s>, found <%s>",
                    "skb:lang:rule:message:replace":"colaPROPERTY",
                    "skb:util:constant:javadoc":"Rule for properties #08"
                },
                "property:09":{
                    "skb:util:constant:ident":"ruleProperty09",
                    "skb:lang:parser:rules:message":"used #### <%s> is not specified for <%s>",
                    "skb:lang:parser:rules:message:add":"note: typedef, struct and member are handled as attributes",
                    "skb:lang:rule:message:replace":"colaPROPERTY",
                    "skb:util:constant:javadoc":"Rule for properties #09"
                },
                "property:10":{
                    "skb:util:constant:ident":"ruleProperty10",
                    "skb:lang:parser:rules:message":"declaration of unknown ####",
                    "skb:lang:parser:rules:message:add":"#### <%s> is not specified",
                    "skb:lang:rule:message:replace":"colaPROPERTY",
                    "skb:lang:target:rules:message:add:insert:path":"colaPROPERTY",
                    "skb:util:constant:javadoc":"Rule for properties #10"
                },
                "property:11":{
                    "skb:util:constant:ident":"ruleProperty11",
                    "skb:lang:parser:rules:message":"empty description in <%s> <%s>",
                    "skb:lang:parser:rules:message:add":"description needs to be a non-empty ####",
                    "skb:lang:target:rules:message:add:insert:path":"colaSTRING",
                    "skb:util:constant:javadoc":"Rule for properties #11"
                },
                "property:12":{
                    "skb:util:constant:ident":"ruleProperty12",
                    "skb:lang:parser:rules:message":"type mismatch for <%s> declaration <%s>",
                    "skb:lang:parser:rules:message:add":"type declared is <%s>, value associated is of type <%s>",
                    "skb:util:constant:javadoc":"Rule for properties #12"
                },
                "property:13":{
                    "skb:util:constant:ident":"ruleProperty13",
                    "skb:lang:parser:rules:message":"potential type mismatch for <%s> declaration <%s>",
                    "skb:lang:parser:rules:message:add":"type declared is <%s>, value associated is of type <%s>",
                    "skb:util:constant:javadoc":"Rule for properties #13"
                },
                "property:14":{
                    "skb:util:constant:ident":"ruleProperty14",
                    "skb:lang:parser:rules:message":"#### scope <%s> redefined for #### <%s>",
                    "skb:lang:rule:message:replace":"colaPROPERTY",
                    "skb:util:constant:javadoc":"Rule for properties #14"
                },

                "contract:01":{
                    "skb:util:constant:ident":"ruleContract01",
                    "skb:lang:parser:rules:message":"#### defined more than once: <%s>",
                    "skb:lang:rule:message:replace":"colaCONTRACT",
                    "skb:util:constant:javadoc":"Rule for contracts #01"
                },
                "contract:02":{
                    "skb:util:constant:ident":"ruleContract02",
                    "skb:lang:parser:rules:message":"used #### <%s> is not specified for <%s>",
                    "skb:lang:rule:message:replace":"colaCONTRACT",
                    "skb:util:constant:javadoc":"Rule for contracts #02"
                },
                "contract:03":{
                    "skb:util:constant:ident":"ruleContract03",
                    "skb:lang:parser:rules:message":"missing mandatory #### <%s> for %s <%s>",
                    "skb:lang:parser:rules:message:add":"all mandatory contracts need to be declared",
                    "skb:lang:rule:message:replace":"colaCONTRACT",
                    "skb:util:constant:javadoc":"Rule for contracts #03"
                },
                "contract:04":{
                    "skb:util:constant:ident":"ruleContract04",
                    "skb:lang:parser:rules:message":"missing required #### <%s> for %s <%s>",
                    "skb:lang:parser:rules:message:add":"all required contracts need to be declared",
                    "skb:lang:rule:message:replace":"colaCONTRACT",
                    "skb:util:constant:javadoc":"Rule for contracts #04"
                },
                "contract:05":{
                    "skb:util:constant:ident":"ruleContract05",
                    "skb:lang:parser:rules:message":"#### scope <%s> redefined for %s <%s>",
                    "skb:lang:rule:message:replace":"colaCONTRACT",
                    "skb:util:constant:javadoc":"Rule for contracts #05"
                },
                
                "item:01":{
                    "skb:util:constant:ident":"ruleItem01",
                    "skb:lang:parser:rules:message":"missing declared item <%s> for declared contract <%2>",
                    "skb:lang:parser:rules:message:add":"all declared items must be defined",
                    "skb:util:constant:javadoc":"Rule for items #01"
                },
                "item:02":{
                    "skb:util:constant:ident":"ruleItem02",
                    "skb:lang:parser:rules:message":"declaration of unknown ####",
                    "skb:lang:parser:rules:message:add":"#### <%s> is not specified",
                    "skb:lang:rule:message:replace":"parserItemProp",
                    "skb:lang:target:rules:message:add:insert:path":"parserItemProp",
                    "skb:util:constant:javadoc":"Rule for items #02"
                },
                "item:03":{
                    "skb:util:constant:ident":"ruleItem03",
                    "skb:lang:parser:rules:message":"potential type mismatch for #### definition <%s>",
                    "skb:lang:parser:rules:message:add":"expected <%s>, found <%s>",
                    "skb:lang:rule:message:replace":"parserItemProp",
                    "skb:util:constant:javadoc":"Rule for items #03"
                },
                "item:04":{
                    "skb:util:constant:ident":"ruleItem04",
                    "skb:lang:parser:rules:message":"type mismatch for #### definition <%s>",
                    "skb:lang:parser:rules:message:add":"expected <%s>, found <%s>",
                    "skb:lang:rule:message:replace":"parserItemProp",
                    "skb:util:constant:javadoc":"Rule for items #04"
                },
                "item:05":{
                    "skb:util:constant:ident":"ruleItem05",
                    "skb:lang:parser:rules:message":"type mismatch for #### definition <%s>",
                    "skb:lang:parser:rules:message:add":"type expected is <%s>, but %s values given",
                    "skb:lang:rule:message:replace":"parserItemProp",
                    "skb:util:constant:javadoc":"Rule for items #05"
                },
                "item:06":{
                    "skb:util:constant:ident":"ruleItem06",
                    "skb:lang:parser:rules:message":"potential type mismatch for #### definition <%s>",
                    "skb:lang:parser:rules:message:add":"type expected is <%s[]>, but only %s value given",
                    "skb:lang:rule:message:replace":"parserItemProp",
                    "skb:util:constant:javadoc":"Rule for items #06"
                },
                "item:07":{
                    "skb:util:constant:ident":"ruleItem07",
                    "skb:lang:parser:rules:message":"missing value for required #### <%s>, no value given",
                    "skb:lang:parser:rules:message:add":"required item-properties must be declared non-empty",
                    "skb:lang:rule:message:replace":"parserItemProp",
                    "skb:util:constant:javadoc":"Rule for items #07"
                },
                "item:08":{
                    "skb:util:constant:ident":"ruleItem08",
                    "skb:lang:parser:rules:message":"missing value for required #### <%s>, one empty value given",
                    "skb:lang:parser:rules:message:add":"required item-properties must be declared non-empty",
                    "skb:lang:rule:message:replace":"parserItemProp",
                    "skb:util:constant:javadoc":"Rule for items #08"
                },
                "item:09":{
                    "skb:util:constant:ident":"ruleItem09",
                    "skb:lang:parser:rules:message":"missing mandatory #### <%s> for %s <%s>",
                    "skb:lang:parser:rules:message:add":"all mandatory item-properties need to be declared",
                    "skb:lang:rule:message:replace":"colaPROPERTY",
                    "skb:util:constant:javadoc":"Rule for items #09"
                },
                "item:10":{
                    "skb:util:constant:ident":"ruleItem10",
                    "skb:lang:parser:rules:message":"missing required #### <%s> for %s <%s>",
                    "skb:lang:parser:rules:message:add":"all required item-properties need to be declared",
                    "skb:lang:rule:message:replace":"colaPROPERTY",
                    "skb:util:constant:javadoc":"Rule for items #10"
                },

                "identifier:01":{
                    "skb:util:constant:ident":"ruleIdentifier01",
                    "skb:lang:parser:rules:message":"#### used more than once",
                    "skb:lang:parser:rules:message:add":"#### <%s> in property definitions",
                    "skb:lang:rule:message:replace":"parserIDENTIFIER",
                    "skb:lang:target:rules:message:add:insert:path":"parserIDENTIFIER",
                    "skb:util:constant:javadoc":"Rule for identifier #01"
                },
                "identifier:02":{
                    "skb:util:constant:ident":"ruleIdentifier02",
                    "skb:lang:parser:rules:message":"#### used more than once",
                    "skb:lang:parser:rules:message:add":"in <%s> declaration for <%s>: <%s> (previously used in <%s>)",
                    "skb:lang:rule:message:replace":"parserIDENTIFIER",
                    "skb:util:constant:javadoc":"Rule for identifier #02"
                },
                "identifier:03":{
                    "skb:util:constant:ident":"ruleIdentifier03",
                    "skb:lang:parser:rules:message":"#### used more than once",
                    "skb:lang:parser:rules:message:add":"#### <%s> in item-property definitions",
                    "skb:lang:rule:message:replace":"parserIDENTIFIER",
                    "skb:lang:target:rules:message:add:insert:path":"parserIDENTIFIER",
                    "skb:util:constant:javadoc":"Rule for identifier #03"
                },
                "identifier:04":{
                    "skb:util:constant:ident":"ruleIdentifier04",
					"skb:lang:parser:rules:message":"#### used more than once",
                    "skb:lang:parser:rules:message:add":"in #### definition: %s",
                    "skb:lang:rule:message:replace":"parserIDENTIFIER",
                    "skb:lang:target:rules:message:add:insert:path":"parserItemProp",
                    "skb:util:constant:javadoc":"Rule for identifier #04"
                },
                "identifier:05":{
                    "skb:util:constant:ident":"ruleIdentifier05",
                    "skb:lang:parser:rules:message":"#### used more than once",
                    "skb:lang:parser:rules:message:add":"in #### definition: %s",
                    "skb:lang:rule:message:replace":"parserIDENTIFIER",
                    "skb:lang:target:rules:message:add:insert:path":"colaPROPERTY",
                    "skb:util:constant:javadoc":"Rule for identifier #05"
                },
                "identifier:06":{
                    "skb:util:constant:ident":"ruleIdentifier06",
                    "skb:lang:parser:rules:message":"#### used more than once",
                    "skb:lang:parser:rules:message:add":"in #### definition: %s",
                    "skb:lang:rule:message:replace":"parserIDENTIFIER",
                    "skb:lang:target:rules:message:add:insert:path":"colaCONTRACT",
                    "skb:util:constant:javadoc":"Rule for identifier #06"
                },
                
                "scoped-name:01":{
                    "skb:util:constant:ident":"ruleScopedName01",
                    "skb:lang:parser:rules:message":"",
                    "skb:lang:parser:rules:message:add":"",
                    "skb:util:constant:javadoc":"Rule for scoped naming #01"
                },
                "scoped-name:02":{
                    "skb:util:constant:ident":"ruleScopedName02",
                    "skb:lang:parser:rules:message":"",
                    "skb:lang:parser:rules:message:add":"",
                    "skb:util:constant:javadoc":"Rule for scoped naming #02"
                },
                "scoped-name:03":{
                    "skb:util:constant:ident":"ruleScopedName03",
                    "skb:lang:parser:rules:message":"",
                    "skb:lang:parser:rules:message:add":"",
                    "skb:util:constant:javadoc":"Rule for scoped naming #03"
                },
                "scoped-name:04":{
                    "skb:util:constant:ident":"ruleScopedName04",
                    "skb:lang:parser:rules:message":"",
                    "skb:lang:parser:rules:message:add":"",
                    "skb:util:constant:javadoc":"Rule for scoped naming #04"
                },
                "scoped-name:05":{
                    "skb:util:constant:ident":"ruleScopedName05",
                    "skb:lang:parser:rules:message":"",
                    "skb:lang:parser:rules:message:add":"",
                    "skb:util:constant:javadoc":"Rule for scoped naming #05"
                },
                "scoped-name:06":{
                    "skb:util:constant:ident":"ruleScopedName06",
                    "skb:lang:parser:rules:message":"",
                    "skb:lang:parser:rules:message:add":"",
                    "skb:util:constant:javadoc":"Rule for scoped naming #06"
                }
            }
        }
    }
}

//tgt-split-code			skb.clioption.tgt-split-code